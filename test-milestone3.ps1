# Milestone 3 Testing Script - All Integrations Complete
Write-Host "=== DigitalMe Milestone 3 Testing ===" -ForegroundColor Green

$baseUrl = "http://localhost:5000"

# SSL certificate handling
add-type @"
    using System.Net;
    using System.Security.Cryptography.X509Certificates;
    public class TrustAllCertsPolicy : ICertificatePolicy {
        public bool CheckValidationResult(
            ServicePoint srvPoint, X509Certificate certificate,
            WebRequest request, int certificateProblem) {
            return true;
        }
    }
"@
[System.Net.ServicePointManager]::CertificatePolicy = New-Object TrustAllCertsPolicy
[System.Net.ServicePointManager]::SecurityProtocol = [System.Net.SecurityProtocolType]::Tls12

# Start the application
Write-Host "Starting DigitalMe application..." -ForegroundColor Yellow
$app = Start-Process -FilePath "dotnet" -ArgumentList "run", "--urls", $baseUrl -WorkingDirectory ".\DigitalMe" -PassThru -WindowStyle Hidden

# Wait for application to start
Start-Sleep -Seconds 8

try {
    # Test 1: Health Check
    Write-Host "`n1. Testing Health Check..." -ForegroundColor Cyan
    try {
        $healthResponse = Invoke-RestMethod -Uri "$baseUrl/health" -Method GET
        Write-Host "‚úÖ Health Check: OK" -ForegroundColor Green
        Write-Host "Status: $($healthResponse.status)" -ForegroundColor Gray
    } catch {
        Write-Host "‚ùå Health Check: FAILED - $($_.Exception.Message)" -ForegroundColor Red
        return
    }

    # Test 2: Create Ivan's Personality Profile
    Write-Host "`n2. Setting up Ivan's Personality..." -ForegroundColor Cyan
    $personalityData = @{
        Name = "Ivan"
        Description = "34-year-old Head of R&D at EllyAnalytics. Expert in C#/.NET, architectural thinking, direct communication style. Believes in '–≤—Å–µ–º –ø–æ—Ö—É–π' philosophy and '—Å–∏–ª–∞ –≤ –ø—Ä–∞–≤–¥–µ'."
    } | ConvertTo-Json
    
    try {
        $personalityResponse = Invoke-RestMethod -Uri "$baseUrl/api/personality" -Method POST -Body $personalityData -ContentType "application/json"
        Write-Host "‚úÖ Personality Setup: OK" -ForegroundColor Green
        $personalityId = $personalityResponse.Id
        
        # Add technical traits
        $traitData = @{
            Category = "Technical"
            Name = "C# Architecture Expert"
            Description = "Deep expertise in C#/.NET architecture, SOLID principles, clean code practices"
            Weight = 2.0
        } | ConvertTo-Json
        
        $traitResponse = Invoke-RestMethod -Uri "$baseUrl/api/personality/$personalityId/traits" -Method POST -Body $traitData -ContentType "application/json"
        Write-Host "Added technical trait: $($traitResponse.Name)" -ForegroundColor Gray
    } catch {
        Write-Host "‚ùå Personality Setup: FAILED - $($_.Exception.Message)" -ForegroundColor Red
    }

    # Test 3: Enhanced Chat with MCP Integration
    Write-Host "`n3. Testing Enhanced MCP Chat..." -ForegroundColor Cyan
    if ($personalityId) {
        $chatData = @{
            Message = "–ü—Ä–∏–≤–µ—Ç, –ò–≤–∞–Ω! –†–∞—Å—Å–∫–∞–∂–∏ –æ —Å–≤–æ–∏—Ö –ø—Ä–∏–Ω—Ü–∏–ø–∞—Ö –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä—ã –≤ C# –ø—Ä–æ–µ–∫—Ç–∞—Ö. –ö–∞–∫ —Ç—ã –æ—Ç–Ω–æ—Å–∏—à—å—Å—è –∫ –º–∏–∫—Ä–æ—Å–µ—Ä–≤–∏—Å–Ω–æ–π –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–µ?"
            Platform = "Web"
            UserId = "milestone3-tester"
        } | ConvertTo-Json
        
        try {
            $chatResponse = Invoke-RestMethod -Uri "$baseUrl/api/chat/send" -Method POST -Body $chatData -ContentType "application/json"
            Write-Host "‚úÖ MCP Chat: OK" -ForegroundColor Green
            Write-Host "Response Preview: $($chatResponse.Content.Substring(0, [Math]::Min(120, $chatResponse.Content.Length)))..." -ForegroundColor Gray
            Write-Host "Mood: $($chatResponse.Metadata.mood), Confidence: $([Math]::Round($chatResponse.Metadata.confidence * 100, 1))%" -ForegroundColor Gray
            Write-Host "Triggered Tools: $($chatResponse.Metadata.triggered_tools -join ', ')" -ForegroundColor Gray
        } catch {
            Write-Host "‚ùå MCP Chat: FAILED - $($_.Exception.Message)" -ForegroundColor Red
        }
    }

    # Test 4: Tool Integration - Personality Traits
    Write-Host "`n4. Testing Tool Integration (Personality Traits)..." -ForegroundColor Cyan
    $toolTestData = @{
        Message = "–†–∞—Å—Å–∫–∞–∂–∏ –æ —Å–≤–æ–∏—Ö —á–µ—Ä—Ç–∞—Ö –ª–∏—á–Ω–æ—Å—Ç–∏ –∏ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏—Ö –Ω–∞–≤—ã–∫–∞—Ö"
        Platform = "Web"  
        UserId = "tool-tester"
    } | ConvertTo-Json
    
    try {
        $toolResponse = Invoke-RestMethod -Uri "$baseUrl/api/chat/send" -Method POST -Body $toolTestData -ContentType "application/json"
        Write-Host "‚úÖ Tool Integration: OK" -ForegroundColor Green
        Write-Host "Tools Triggered: $($toolResponse.Metadata.triggered_tools -join ', ')" -ForegroundColor Gray
    } catch {
        Write-Host "‚ùå Tool Integration: FAILED - $($_.Exception.Message)" -ForegroundColor Red
    }

    # Test 5: External Integration Readiness
    Write-Host "`n5. Testing External Integrations Readiness..." -ForegroundColor Cyan
    $externalTestData = @{
        Message = "–°–æ–∑–¥–∞–π –º–Ω–µ —Å–æ–±—ã—Ç–∏–µ –≤ –∫–∞–ª–µ–Ω–¥–∞—Ä–µ –Ω–∞ –∑–∞–≤—Ç—Ä–∞ –≤ 14:00 - –í—Å—Ç—Ä–µ—á–∞ –ø–æ –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–µ –ø—Ä–æ–µ–∫—Ç–∞"
        Platform = "Web"
        UserId = "external-tester"
    } | ConvertTo-Json
    
    try {
        $externalResponse = Invoke-RestMethod -Uri "$baseUrl/api/chat/send" -Method POST -Body $externalTestData -ContentType "application/json"
        Write-Host "‚úÖ External Integrations: READY" -ForegroundColor Green
        Write-Host "Response includes calendar handling: $($externalResponse.Content.Contains('–∫–∞–ª–µ–Ω–¥–∞—Ä') -or $externalResponse.Content.Contains('—Å–æ–±—ã—Ç–∏–µ'))" -ForegroundColor Gray
    } catch {
        Write-Host "‚ùå External Integrations: FAILED - $($_.Exception.Message)" -ForegroundColor Red
    }

    # Test 6: Agent Behavior Engine Analysis
    Write-Host "`n6. Testing Agent Behavior Engine..." -ForegroundColor Cyan
    $behaviorTestData = @{
        Message = "–£ –º–µ–Ω—è –ø—Ä–æ–±–ª–µ–º–∞ —Å –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å—é –≤ .NET –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏, –º–æ–∂–µ—à—å –ø–æ–º–æ—á—å?"
        Platform = "Web"
        UserId = "behavior-tester"
    } | ConvertTo-Json
    
    try {
        $behaviorResponse = Invoke-RestMethod -Uri "$baseUrl/api/chat/send" -Method POST -Body $behaviorTestData -ContentType "application/json"
        Write-Host "‚úÖ Agent Behavior: OK" -ForegroundColor Green
        Write-Host "Detected Mood: $($behaviorResponse.Metadata.mood)" -ForegroundColor Gray
        Write-Host "Confidence: $([Math]::Round($behaviorResponse.Metadata.confidence * 100, 1))%" -ForegroundColor Gray
        Write-Host "Technical Context Detected: $($behaviorResponse.Metadata.mood -eq 'technical')" -ForegroundColor Gray
    } catch {
        Write-Host "‚ùå Agent Behavior: FAILED - $($_.Exception.Message)" -ForegroundColor Red
    }

    # Test 7: System Prompt Generation
    Write-Host "`n7. Testing System Prompt Generation..." -ForegroundColor Cyan
    if ($personalityId) {
        try {
            $promptResponse = Invoke-RestMethod -Uri "$baseUrl/api/personality/$personalityId/system-prompt" -Method GET
            Write-Host "‚úÖ System Prompt: OK" -ForegroundColor Green
            $promptLength = $promptResponse.Length
            Write-Host "Prompt Length: $promptLength characters" -ForegroundColor Gray
            Write-Host "Contains Ivan's principles: $($promptResponse.Contains('–≤—Å–µ–º –ø–æ—Ö—É–π') -and $promptResponse.Contains('—Å–∏–ª–∞ –≤ –ø—Ä–∞–≤–¥–µ'))" -ForegroundColor Gray
        } catch {
            Write-Host "‚ùå System Prompt: FAILED - $($_.Exception.Message)" -ForegroundColor Red
        }
    }

    # Test 8: Chat Status with All Components
    Write-Host "`n8. Testing Complete System Status..." -ForegroundColor Cyan
    try {
        $statusResponse = Invoke-RestMethod -Uri "$baseUrl/api/chat/status" -Method GET
        Write-Host "‚úÖ System Status: OK" -ForegroundColor Green
        Write-Host "MCP Connected: $($statusResponse.McpConnected)" -ForegroundColor Gray
        Write-Host "Personality Loaded: $($statusResponse.PersonalityLoaded)" -ForegroundColor Gray
        Write-Host "Overall Status: $($statusResponse.Status)" -ForegroundColor Gray
        
        # Check if system is ready for Milestone 3
        $isReady = $statusResponse.PersonalityLoaded -eq $true
        Write-Host "Milestone 3 Ready: $isReady" -ForegroundColor $(if($isReady) {"Green"} else {"Red"})
    } catch {
        Write-Host "‚ùå System Status: FAILED - $($_.Exception.Message)" -ForegroundColor Red
    }

    Write-Host "`n=== Milestone 3 Testing Complete ===" -ForegroundColor Green
    Write-Host ""
    Write-Host "‚úÖ Completed Features:" -ForegroundColor Green
    Write-Host "  ‚Ä¢ MCP Integration with personality-aware system prompts" -ForegroundColor White
    Write-Host "  ‚Ä¢ Agent Behavior Engine with mood analysis" -ForegroundColor White  
    Write-Host "  ‚Ä¢ External integrations architecture (Telegram, Google, GitHub)" -ForegroundColor White
    Write-Host "  ‚Ä¢ Enhanced conversation management with metadata" -ForegroundColor White
    Write-Host "  ‚Ä¢ Tool registry and execution framework" -ForegroundColor White
    Write-Host "  ‚Ä¢ Confidence scoring and context management" -ForegroundColor White
    Write-Host ""
    Write-Host "üöÄ Ready for Frontend Development (Flow 3)" -ForegroundColor Magenta

} finally {
    # Stop the application
    Write-Host "`nStopping application..." -ForegroundColor Yellow
    Stop-Process -Id $app.Id -Force -ErrorAction SilentlyContinue
}

Write-Host "Milestone 3 testing completed." -ForegroundColor Green