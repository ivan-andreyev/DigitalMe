# –ü–ª–∞–Ω-–≤–∞–ª–∏–¥–∞—Ç–æ—Ä —Å—Ç—Ä—É–∫—Ç—É—Ä—ã - –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–µ—Ä–µ–¥ —Ä–µ–≤—å—é
# –í–µ—Ä—Å–∏—è: 1.0
# –ù–∞–∑–Ω–∞—á–µ–Ω–∏–µ: –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –≤—ã—è–≤–ª–µ–Ω–∏–µ –Ω–∞—Ä—É—à–µ–Ω–∏–π –∫–∞—Ç–∞–ª–æ–≥–∏–∑–∞—Ü–∏–∏ –∏ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –ø–ª–∞–Ω–æ–≤

param(
    [string]$Path = "docs/plans",
    [switch]$Detailed = $false
)

Write-Host "üöÄ –ü–õ–ê–ù-–í–ê–õ–ò–î–ê–¢–û–† –°–¢–†–£–ö–¢–£–†–´" -ForegroundColor Green
Write-Host "–ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞—Ç–∞–ª–æ–≥: $Path" -ForegroundColor Yellow
Write-Host "=" * 60

# –§—É–Ω–∫—Ü–∏—è 0: üî• –ü–†–û–í–ï–†–ö–ê –ó–û–õ–û–¢–û–ì–û –ü–†–ê–í–ò–õ–ê #1 - –∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ –∫–∞—Ç–∞–ª–æ–≥–æ–≤
function Test-GoldenRule1 {
    param([string]$BasePath)
    
    Write-Host "`nüî• –ü–†–û–í–ï–†–ö–ê –ó–û–õ–û–¢–û–ì–û –ü–†–ê–í–ò–õ–ê #1:" -ForegroundColor Magenta
    Write-Host "–ö–∞—Ç–∞–ª–æ–≥ –¥–æ–ª–∂–µ–Ω –Ω–∞–∑—ã–≤–∞—Ç—å—Å—è –ò–î–ï–ù–¢–ò–ß–ù–û —Ñ–∞–π–ª—É –ø–ª–∞–Ω–∞ (–±–µ–∑ .md)`n" -ForegroundColor Magenta
    
    $violations = @()
    
    Get-ChildItem -Path $BasePath -Recurse -Filter "*.md" | ForEach-Object {
        $file = $_
        $fileName = $file.BaseName  # –∏–º—è —Ñ–∞–π–ª–∞ –±–µ–∑ .md
        $fileDir = $file.Directory.FullName
        $expectedCatalogPath = Join-Path $fileDir $fileName
        $relativePath = $file.FullName.Replace((Get-Location).Path + "\", "")
        
        # –ï—Å–ª–∏ —Ä—è–¥–æ–º —Å —Ñ–∞–π–ª–æ–º –µ—Å—Ç—å –∫–∞—Ç–∞–ª–æ–≥, –ø—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ –∏–º—ë–Ω
        if (Test-Path $expectedCatalogPath -PathType Container) {
            # –ö–∞—Ç–∞–ª–æ–≥ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –∏ –∏–º—è —Å–æ–≤–ø–∞–¥–∞–µ—Ç - –≤—Å—ë –û–ö
            if ($Detailed) {
                Write-Host "‚úÖ –ó–û–õ–û–¢–û–ï –ü–†–ê–í–ò–õ–û –û–ö: $relativePath ‚Üî $fileName/" -ForegroundColor Green
            }
        } else {
            # –ö–∞—Ç–∞–ª–æ–≥ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç - –ø—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –∫–∞—Ç–∞–ª–æ–≥–∏ —Å –ø–æ—Ö–æ–∂–∏–º –∏–º–µ–Ω–µ–º (–≤–æ–∑–º–æ–∂–Ω–∞—è –æ—à–∏–±–∫–∞ –∏–º–µ–Ω–æ–≤–∞–Ω–∏—è)
            $allDirs = Get-ChildItem -Path $fileDir -Directory
            $suspiciousDirs = $allDirs | Where-Object { 
                # –ò—â–µ–º –∫–∞—Ç–∞–ª–æ–≥–∏, –∫–æ—Ç–æ—Ä—ã–µ –º–æ–≥–ª–∏ –±—ã—Ç—å –ø—Ä–µ–¥–Ω–∞–∑–Ω–∞—á–µ–Ω—ã –¥–ª—è —ç—Ç–æ–≥–æ —Ñ–∞–π–ª–∞
                $_.Name -like "*$($fileName.Split('-')[-1])*" -or 
                $_.Name -like "$($fileName.Split('-')[0])*" 
            }
            
            if ($suspiciousDirs.Count -gt 0) {
                Write-Host "‚ö†Ô∏è –ü–û–¢–ï–ù–¶–ò–ê–õ–¨–ù–û–ï –ù–ê–†–£–®–ï–ù–ò–ï: $relativePath" -ForegroundColor Yellow
                Write-Host "   –í–æ–∑–º–æ–∂–Ω–æ –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ –Ω–∞–∑–≤–∞–Ω–Ω—ã–µ –∫–∞—Ç–∞–ª–æ–≥–∏:" -ForegroundColor Yellow
                foreach ($dir in $suspiciousDirs) {
                    Write-Host "   - $($dir.Name)/ (–¥–æ–ª–∂–Ω–æ –±—ã—Ç—å $fileName/ ?)" -ForegroundColor Yellow
                }
                
                $violations += @{
                    File = $relativePath
                    ExpectedCatalog = "$fileName/"
                    SuspiciousCatalogs = $suspiciousDirs | ForEach-Object { $_.Name }
                }
            }
            # –ï—Å–ª–∏ –∫–∞—Ç–∞–ª–æ–≥–∞ –Ω–µ—Ç –≤–æ–æ–±—â–µ - —ç—Ç–æ –Ω–æ—Ä–º–∞–ª—å–Ω–æ –¥–ª—è standalone —Ñ–∞–π–ª–æ–≤!
            # –ï—Å–ª–∏ –∫–∞—Ç–∞–ª–æ–≥–æ–≤ –Ω–µ—Ç –≤–æ–æ–±—â–µ - —ç—Ç–æ –Ω–µ –Ω–∞—Ä—É—à–µ–Ω–∏–µ, –ø—Ä–æ—Å—Ç–æ –ø–ª–∞–Ω –±–µ–∑ –ø–æ–¥—Ñ–∞–π–ª–æ–≤
        }
    }
    
    if ($violations.Count -eq 0) {
        Write-Host "‚úÖ –ó–û–õ–û–¢–û–ï –ü–†–ê–í–ò–õ–û #1 —Å–æ–±–ª—é–¥–µ–Ω–æ!" -ForegroundColor Green
    }
    
    return $violations
}

# –§—É–Ω–∫—Ü–∏—è 0.5: üî• –ü–†–û–í–ï–†–ö–ê –ó–û–õ–û–¢–û–ì–û –ü–†–ê–í–ò–õ–ê #2 - –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–æ—Ä—ã —Å–Ω–∞—Ä—É–∂–∏
function Test-GoldenRule2 {
    param([string]$BasePath)
    
    Write-Host "`nüî• –ü–†–û–í–ï–†–ö–ê –ó–û–õ–û–¢–û–ì–û –ü–†–ê–í–ò–õ–ê #2:" -ForegroundColor Magenta
    Write-Host "–ö–æ–æ—Ä–¥–∏–Ω–∞—Ç–æ—Ä –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –°–ù–ê–†–£–ñ–ò —Å–≤–æ–µ–≥–æ –∫–∞—Ç–∞–ª–æ–≥–∞`n" -ForegroundColor Magenta
    
    $violations = @()
    
    Get-ChildItem -Path $BasePath -Recurse -Directory | ForEach-Object {
        $catalogDir = $_
        $catalogName = $catalogDir.Name
        $parentDir = $catalogDir.Parent.FullName
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–æ—Ä –í–ù–£–¢–†–ò –∫–∞—Ç–∞–ª–æ–≥–∞ (–û–®–ò–ë–ö–ê!)
        $coordinatorInside = Join-Path $catalogDir.FullName "$catalogName.md"
        if (Test-Path $coordinatorInside) {
            $relativePath = $coordinatorInside.Replace((Get-Location).Path + "\", "")
            Write-Host "üö® –ó–û–õ–û–¢–û–ï –ü–†–ê–í–ò–õ–û #2 –ù–ê–†–£–®–ï–ù–û: $relativePath" -ForegroundColor Red
            Write-Host "   –ö–æ–æ—Ä–¥–∏–Ω–∞—Ç–æ—Ä –ù–ï –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –≤–Ω—É—Ç—Ä–∏ —Å–≤–æ–µ–≥–æ –∫–∞—Ç–∞–ª–æ–≥–∞!" -ForegroundColor Yellow
            Write-Host "   –ü–µ—Ä–µ–º–µ—Å—Ç–∏—Ç–µ –≤: $($catalogDir.Parent.FullName.Replace((Get-Location).Path + '\', ''))" -ForegroundColor Yellow
            
            $violations += @{
                CoordinatorInside = $relativePath
                ShouldBeAt = Join-Path $parentDir "$catalogName.md"
            }
        }
    }
    
    if ($violations.Count -eq 0) {
        Write-Host "‚úÖ –ó–û–õ–û–¢–û–ï –ü–†–ê–í–ò–õ–û #2 —Å–æ–±–ª—é–¥–µ–Ω–æ!" -ForegroundColor Green
    }
    
    return $violations
}

# –§—É–Ω–∫—Ü–∏—è 1: –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–∑–º–µ—Ä–æ–≤ —Ñ–∞–π–ª–æ–≤
function Test-FileSizes {
    param([string]$BasePath)
    
    Write-Host "`nüîç –ü–†–û–í–ï–†–ö–ê –†–ê–ó–ú–ï–†–û–í –§–ê–ô–õ–û–í:" -ForegroundColor Cyan
    Write-Host "–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏–π –ª–∏–º–∏—Ç: >400 —Å—Ç—Ä–æ–∫ | –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ: >250 —Å—Ç—Ä–æ–∫`n"
    
    $criticalFiles = @()
    $warningFiles = @()
    
    Get-ChildItem -Path $BasePath -Recurse -Filter "*.md" | ForEach-Object {
        $lines = (Get-Content $_.FullName -ErrorAction SilentlyContinue | Measure-Object -Line).Lines
        $relativePath = $_.FullName.Replace((Get-Location).Path + "\", "")
        
        if ($lines -gt 400) {
            Write-Host "üö® –ö–†–ò–¢–ò–ß–ï–°–ö–û–ï: $relativePath ($lines —Å—Ç—Ä–æ–∫)" -ForegroundColor Red
            $criticalFiles += @{Path = $relativePath; Lines = $lines}
        } elseif ($lines -gt 250) {
            Write-Host "‚ö†Ô∏è  –í–ù–ò–ú–ê–ù–ò–ï: $relativePath ($lines —Å—Ç—Ä–æ–∫)" -ForegroundColor Yellow
            $warningFiles += @{Path = $relativePath; Lines = $lines}
        }
    }
    
    if ($criticalFiles.Count -eq 0 -and $warningFiles.Count -eq 0) {
        Write-Host "‚úÖ –í—Å–µ —Ñ–∞–π–ª—ã –≤ –ø—Ä–µ–¥–µ–ª–∞—Ö –Ω–æ—Ä–º—ã" -ForegroundColor Green
    }
    
    return @{Critical = $criticalFiles; Warning = $warningFiles}
}

# –§—É–Ω–∫—Ü–∏—è 2: –ü–æ–∏—Å–∫ –ø–∞—Ç—Ç–µ—Ä–Ω–æ–≤ –∫–∞—Ç–∞–ª–æ–≥–∏–∑–∞—Ü–∏–∏
function Test-CatalogizationPatterns {
    param([string]$BasePath)
    
    Write-Host "`nüîç –ü–†–û–í–ï–†–ö–ê –ü–ê–¢–¢–ï–†–ù–û–í –ö–ê–¢–ê–õ–û–ì–ò–ó–ê–¶–ò–ò:" -ForegroundColor Cyan
    Write-Host "–ò—â–µ–º —Ñ–∞–π–ª—ã —Å –æ–¥–∏–Ω–∞–∫–æ–≤—ã–º –ø—Ä–µ—Ñ–∏–∫—Å–æ–º –í –û–î–ù–û–ú –ö–ê–¢–ê–õ–û–ì–ï (–∏—Å—Ç–∏–Ω–Ω—ã–µ –∫–∞–Ω–¥–∏–¥–∞—Ç—ã –Ω–∞ –≤—ã–Ω–æ—Å –≤ –ø–æ–¥–ø–∞–ø–∫—É)`n"
    
    $violations = @()
    $groups = @{}
    
    # –°–æ–±–∏—Ä–∞–µ–º –≥—Ä—É–ø–ø—ã –ø–æ –∫–ª—é—á—É: <DirectoryFullPath>|<NN-NN>
    Get-ChildItem -Path $BasePath -Recurse -Filter "*.md" | ForEach-Object {
        $dir = $_.Directory.FullName
        $name = $_.BaseName
        $prefix = $null
        if ($name -match '^(\d+-\d+)') { $prefix = $matches[1] }
        else { return }
        $key = "$dir|$prefix"
        if (-not $groups.ContainsKey($key)) { $groups[$key] = @() }
        $groups[$key] += $_
    }
    
    foreach ($entry in $groups.GetEnumerator()) {
        $key = $entry.Key
        $files = $entry.Value
        if ($files.Count -le 1) { continue }
        
        # –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Å–ª—É—á–∞–π: –µ—Å—Ç—å –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–æ—Ä <NN-NN-Name>.md –≤ –∫–∞—Ç–∞–ª–æ–≥–µ –≤–µ—Ä—Ö–Ω–µ–≥–æ —É—Ä–æ–≤–Ω—è
        # –∏ –æ—Ç–¥–µ–ª—å–Ω–∞—è –ø–æ–¥–ø–∞–ø–∫–∞ <NN-NN-Name>/ —Å –¥–æ—á–µ—Ä–Ω–∏–º–∏ —Ñ–∞–π–ª–∞–º–∏ (–¥–µ—Ç–∏ —É–∂–µ –≤ –¥—Ä—É–≥–æ–π –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ –∏ —Å—é–¥–∞ –Ω–µ –ø–æ–ø–∞–¥–∞—é—Ç)
        # –ó–¥–µ—Å—å –∂–µ –æ—Ç–ª–∞–≤–ª–∏–≤–∞–µ–º –¢–û–õ–¨–ö–û —Å–∏—Ç—É–∞—Ü–∏—é, –∫–æ–≥–¥–∞ –≤ –û–î–ù–û–ú –∫–∞—Ç–∞–ª–æ–≥–µ –ª–µ–∂–∏—Ç –±–æ–ª–µ–µ –æ–¥–Ω–æ–≥–æ —Ñ–∞–π–ª–∞ —Å –æ–¥–Ω–∏–º –ø—Ä–µ—Ñ–∏–∫—Å–æ–º
        $dirPath = ($key.Split('|'))[0]
        $dirLeaf = Split-Path -Path $dirPath -Leaf
        $pattern = ($key.Split('|'))[1]

        # –Ø–≤–Ω—ã–µ —Ä–∞–∑–¥–µ–ª—ã –≤–µ—Ä—Ö–Ω–µ–≥–æ —É—Ä–æ–≤–Ω—è, –≥–¥–µ –¥–æ–ø—É—Å–∫–∞–µ—Ç—Å—è –Ω–µ—Å–∫–æ–ª—å–∫–æ –ø–æ–¥–≥—Ä—É–ø–ø —Å –æ–±—â–∏–º –¥–≤—É—Ö—É—Ä–æ–≤–Ω–µ–≤—ã–º –ø—Ä–µ—Ñ–∏–∫—Å–æ–º
        # (–∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ –≤ –æ–¥–Ω–æ–º —Ä–∞–∑–¥–µ–ª–µ):
        if ((Split-Path -Path $dirPath -Leaf) -in @('03-Tests', '12-Demo')) { continue }

        # –ï—Å–ª–∏ –∫–∞—Ç–∞–ª–æ–≥ —É–∂–µ –Ω–∞–∑–≤–∞–Ω —Å —ç—Ç–∏–º –ø—Ä–µ—Ñ–∏–∫—Å–æ–º (–Ω–∞–ø—Ä–∏–º–µ—Ä, 05-5-Finalization/ –∏–ª–∏ 06-2-Performance/),
        # —Å—á–∏—Ç–∞–µ–º, —á—Ç–æ –∫–∞—Ç–∞–ª–æ–≥–∏–∑–∞—Ü–∏—è —É–∂–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞ –∏ –¥–æ–ø. –≤–ª–æ–∂–µ–Ω–Ω–æ—Å—Ç—å –Ω–µ —Ç—Ä–µ–±—É–µ—Ç—Å—è
        if ($dirLeaf -like "$pattern*") { continue }

        # –ï—Å–ª–∏ –¥–ª—è –ö–ê–ñ–î–û–ì–û —Ñ–∞–π–ª–∞ –≤ –≥—Ä—É–ø–ø–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –æ–¥–Ω–æ–∏–º—ë–Ω–Ω—ã–π –∫–∞—Ç–∞–ª–æ–≥-—Å–æ—Å–µ–¥ (–∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–æ—Ä —Å–Ω–∞—Ä—É–∂–∏ + –ø–∞–ø–∫–∞ –≤–Ω—É—Ç—Ä–∏),
        # —Ç–æ —Å—á–∏—Ç–∞–µ–º, —á—Ç–æ —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞ –∏ –¥–æ–ø. –∫–∞—Ç–∞–ª–æ–≥–∏–∑–∞—Ü–∏—è –Ω–µ —Ç—Ä–µ–±—É–µ—Ç—Å—è
        $allHaveOwnDirs = $true
        foreach ($f in $files) {
            $coordDir = Join-Path $f.Directory.FullName $f.BaseName
            if (-not (Test-Path -LiteralPath $coordDir)) { $allHaveOwnDirs = $false; break }
        }
        if ($allHaveOwnDirs) { continue }
        
        Write-Host "üö® –ü–ê–¢–¢–ï–†–ù: $pattern ‚Üí $($files.Count) —Ñ–∞–π–ª–æ–≤ —Ç—Ä–µ–±—É—é—Ç –∫–∞—Ç–∞–ª–æ–≥–∏–∑–∞—Ü–∏–∏" -ForegroundColor Red
        $fileList = @()
        foreach ($f in $files) {
            $relativePath = $f.FullName.Replace((Get-Location).Path + "\", "")
            Write-Host "   - $relativePath" -ForegroundColor Yellow
            $fileList += $relativePath
        }
        $violations += @{
            Pattern = $pattern
            Count = $files.Count
            Files = $fileList
        }
    }
    
    if ($violations.Count -eq 0) {
        Write-Host "‚úÖ –ù–∞—Ä—É—à–µ–Ω–∏–π –ø–∞—Ç—Ç–µ—Ä–Ω–æ–≤ –∫–∞—Ç–∞–ª–æ–≥–∏–∑–∞—Ü–∏–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ" -ForegroundColor Green
    }
    
    return $violations
}

# –§—É–Ω–∫—Ü–∏—è 3: –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ü–∏–æ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤
function Test-CoordinationFiles {
    param([string]$BasePath)
    
    Write-Host "`nüîç –ü–†–û–í–ï–†–ö–ê –ö–û–û–†–î–ò–ù–ê–¶–ò–û–ù–ù–´–• –§–ê–ô–õ–û–í:" -ForegroundColor Cyan
    Write-Host "–ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ü–∏–æ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤ –∏ –∫–∞—Ç–∞–ª–æ–≥–æ–≤`n"
    
    $issues = @()
    
    Get-ChildItem -Path $BasePath -Recurse -Filter "*.md" | ForEach-Object {
        $coordFileName = $_.BaseName
        $coordDir = Join-Path $_.Directory.FullName $coordFileName
        $relativePath = $_.FullName.Replace((Get-Location).Path + "\", "")
        
        if (Test-Path $coordDir) {
            # –í–∞–∂–Ω–æ: —Å—á–∏—Ç–∞–µ–º –∫–∞—Ç–∞–ª–æ–≥ –Ω–µ–ø—É—Å—Ç—ã–º, –µ—Å–ª–∏ –≤ –Ω–µ–º –µ—Å—Ç—å .md –≤ –ª—é–±–æ–º —É—Ä–æ–≤–Ω–µ –≤–ª–æ–∂–µ–Ω–Ω–æ—Å—Ç–∏
            $childFiles = Get-ChildItem -Path $coordDir -Recurse -Filter "*.md" -ErrorAction SilentlyContinue
            if ($childFiles.Count -eq 0) {
                Write-Host "‚ö†Ô∏è  –ü–£–°–¢–û–ô –ö–ê–¢–ê–õ–û–ì: $coordFileName/ –¥–ª—è $relativePath" -ForegroundColor Yellow
                $issues += @{
                    Type = "EmptyDirectory"
                    File = $relativePath
                    Directory = $coordDir.Replace((Get-Location).Path + "\", "")
                }
            } else {
                if ($Detailed) {
                    Write-Host "‚úÖ –û–ö: $relativePath ‚Üî $coordFileName/ ($($childFiles.Count) —Ñ–∞–π–ª–æ–≤)" -ForegroundColor Green
                }
            }
        }
    }
    
    if ($issues.Count -eq 0) {
        Write-Host "‚úÖ –í—Å–µ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ü–∏–æ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã" -ForegroundColor Green
    }
    
    return $issues
}

# –§—É–Ω–∫—Ü–∏—è 4: –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ü–µ–ª–æ—Å—Ç–Ω–æ—Å—Ç–∏ —Å—Å—ã–ª–æ–∫
function Test-LinkIntegrity {
    param([string]$BasePath)
    
    Write-Host "`nüîç –ü–†–û–í–ï–†–ö–ê –¶–ï–õ–û–°–¢–ù–û–°–¢–ò –°–°–´–õ–û–ö:" -ForegroundColor Cyan
    Write-Host "–ò—â–µ–º –±–∏—Ç—ã–µ —Å—Å—ã–ª–∫–∏ –Ω–∞ –Ω–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ —Ñ–∞–π–ª—ã`n"
    
    $brokenLinks = @()
    
    Get-ChildItem -Path $BasePath -Recurse -Filter "*.md" | ForEach-Object {
        $currentFile = $_
        $content = Get-Content $currentFile.FullName -ErrorAction SilentlyContinue
        $relativePath = $currentFile.FullName.Replace((Get-Location).Path + "\", "")
        
        if ($content) {
            $inFence = $false
            $content | ForEach-Object {
                $line = $_
                # –¢–æ–≥–≥–ª –¥–ª—è –º–Ω–æ–≥–æ—Å—Ç—Ä–æ—á–Ω—ã—Ö –∫–æ–¥–æ–≤—ã—Ö –±–ª–æ–∫–æ–≤ ```
                if ($line -match '^\s*```') { $inFence = -not $inFence; return }
                if ($inFence) { return }

                # –£–±–∏—Ä–∞–µ–º –∏–Ω–ª–∞–π–Ω-–∫–æ–¥ `...`
                $lineToScan = [regex]::Replace($line, '`[^`]*`', '')

                # –ò—â–µ–º –≤—Å–µ —Å—Å—ã–ª–∫–∏ [text](path.md) (—Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π —è–∫–æ—Ä–µ–π), –∏—Å–∫–ª—é—á–∞—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è ![]()
                $pattern = '(?<!\!)\[([^\]]+)\]\(([^)]+\.md(?:#[^)]+)?)\)'
                $matchesAll = [regex]::Matches($lineToScan, $pattern)

                foreach ($m in $matchesAll) {
                    $linkText = $m.Groups[1].Value
                    $linkPathRaw = $m.Groups[2].Value

                    if ($linkPathRaw -match '^(http|https)://|^mailto:') { continue }

                    # –û—Ç–±—Ä–∞—Å—ã–≤–∞–µ–º —è–∫–æ—Ä—å, –Ω–æ—Ä–º–∞–ª–∏–∑—É–µ–º –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω—ã–π –ø—É—Ç—å –∏ —Å–ª—ç—à–∏
                    $linkPath = $linkPathRaw -replace '#.*$',''
                    $baseDir = Split-Path $currentFile.FullName
                    $normalized = $linkPath.Trim()
                    if ($normalized.StartsWith('./')) { $normalized = $normalized.Substring(2) }
                    $normalized = $normalized -replace '/', '\\'

                    $fullCandidate = [System.IO.Path]::GetFullPath((Join-Path $baseDir $normalized))
                    if (-not (Test-Path -LiteralPath $fullCandidate)) {
                        Write-Host "üö® –ë–ò–¢–ê–Ø –°–°–´–õ–ö–ê: $relativePath ‚Üí $linkPathRaw" -ForegroundColor Red
                        $brokenLinks += @{
                            SourceFile = $relativePath
                            BrokenLink = $linkPathRaw
                            LinkText = $linkText
                        }
                    }
                }
            }
        }
    }
    
    if ($brokenLinks.Count -eq 0) {
        Write-Host "‚úÖ –í—Å–µ —Å—Å—ã–ª–∫–∏ —Ü–µ–ª–æ—Å—Ç–Ω—ã" -ForegroundColor Green
    }
    
    return $brokenLinks
}

# –û—Å–Ω–æ–≤–Ω–∞—è –ª–æ–≥–∏–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è
try {
    if (-not (Test-Path $Path)) {
        Write-Host "‚ùå –û–®–ò–ë–ö–ê: –ü—É—Ç—å $Path –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç!" -ForegroundColor Red
        exit 1
    }
    
    $results = @{
        GoldenRule1 = Test-GoldenRule1 -BasePath $Path
        GoldenRule2 = Test-GoldenRule2 -BasePath $Path
        FileSizes = Test-FileSizes -BasePath $Path
        CatalogPatterns = Test-CatalogizationPatterns -BasePath $Path  
        CoordFiles = Test-CoordinationFiles -BasePath $Path
        BrokenLinks = Test-LinkIntegrity -BasePath $Path
    }
    
    # –ò—Ç–æ–≥–æ–≤–∞—è —Å–≤–æ–¥–∫–∞
    Write-Host "`n" + "=" * 60
    Write-Host "üìä –ò–¢–û–ì–û–í–ê–Ø –°–í–û–î–ö–ê:" -ForegroundColor Green
    
    $totalIssues = 0
    $totalIssues += $results.GoldenRule1.Count
    $totalIssues += $results.GoldenRule2.Count
    $totalIssues += $results.FileSizes.Critical.Count
    $totalIssues += $results.CatalogPatterns.Count
    $totalIssues += $results.CoordFiles.Count
    $totalIssues += $results.BrokenLinks.Count
    
    if ($totalIssues -eq 0) {
        Write-Host "üéâ –û–¢–õ–ò–ß–ù–û! –ù–∞—Ä—É—à–µ–Ω–∏–π —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –Ω–µ –Ω–∞–π–¥–µ–Ω–æ!" -ForegroundColor Green
    } else {
        Write-Host "‚ö†Ô∏è  –û–±–Ω–∞—Ä—É–∂–µ–Ω–æ –Ω–∞—Ä—É—à–µ–Ω–∏–π: $totalIssues" -ForegroundColor Yellow
        Write-Host "üîß –¢—Ä–µ–±—É–µ—Ç—Å—è –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–µ—Ä–µ–¥ –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏–µ–º —Ä–∞–±–æ—Ç—ã" -ForegroundColor Red
    }
    
    Write-Host "`nüìù –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò:"
    if ($results.GoldenRule1.Count -gt 0) {
        Write-Host "   üî• –ü–†–ò–û–†–ò–¢–ï–¢ #1: –ü–µ—Ä–µ–∏–º–µ–Ω—É–π—Ç–µ –∫–∞—Ç–∞–ª–æ–≥–∏ —Å–æ–≥–ª–∞—Å–Ω–æ –ó–æ–ª–æ—Ç–æ–º—É –ü—Ä–∞–≤–∏–ª—É #1!" -ForegroundColor Red
    }
    if ($results.GoldenRule2.Count -gt 0) {
        Write-Host "   üî• –ü–†–ò–û–†–ò–¢–ï–¢ #2: –ü–µ—Ä–µ–º–µ—Å—Ç–∏—Ç–µ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–æ—Ä—ã —Å–æ–≥–ª–∞—Å–Ω–æ –ó–æ–ª–æ—Ç–æ–º—É –ü—Ä–∞–≤–∏–ª—É #2!" -ForegroundColor Red
    }
    if ($results.FileSizes.Critical.Count -gt 0) {
        Write-Host "   ‚Ä¢ –†–∞–∑–±–µ–π—Ç–µ —Ñ–∞–π–ª—ã >400 —Å—Ç—Ä–æ–∫ –Ω–∞ –ø–æ–¥—Ñ–∞–π–ª—ã" -ForegroundColor Yellow
    }
    if ($results.CatalogPatterns.Count -gt 0) {
        Write-Host "   ‚Ä¢ –°–æ–∑–¥–∞–π—Ç–µ –∫–∞—Ç–∞–ª–æ–≥–∏ –¥–ª—è —Ñ–∞–π–ª–æ–≤ —Å –æ–±—â–∏–º–∏ –ø–∞—Ç—Ç–µ—Ä–Ω–∞–º–∏" -ForegroundColor Yellow
    }
    if ($results.CoordFiles.Count -gt 0) {
        Write-Host "   ‚Ä¢ –£–¥–∞–ª–∏—Ç–µ –ø—É—Å—Ç—ã–µ –∫–∞—Ç–∞–ª–æ–≥–∏ –∏–ª–∏ –¥–æ–±–∞–≤—å—Ç–µ —Ñ–∞–π–ª—ã" -ForegroundColor Yellow
    }
    if ($results.BrokenLinks.Count -gt 0) {
        Write-Host "   ‚Ä¢ –ò—Å–ø—Ä–∞–≤—å—Ç–µ –±–∏—Ç—ã–µ —Å—Å—ã–ª–∫–∏ –∏–ª–∏ —Å–æ–∑–¥–∞–π—Ç–µ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—â–∏–µ —Ñ–∞–π–ª—ã" -ForegroundColor Yellow
    }
    
    Write-Host "`n‚úÖ –í–∞–ª–∏–¥–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞: $(Get-Date -Format 'yyyy-MM-dd HH:mm:ss')"
    
    # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –æ–±—ä–µ–∫—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –∏ –≤—ã—Ö–æ–¥–∏–º —Å –∫–æ–¥–æ–º –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –Ω–∞–ª–∏—á–∏—è –Ω–∞—Ä—É—à–µ–Ω–∏–π
    $script:__results = $results
    if ($totalIssues -eq 0) { exit 0 } else { exit 1 }
}
catch {
    Write-Host "‚ùå –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê: $($_.Exception.Message)" -ForegroundColor Red
    exit 1
}