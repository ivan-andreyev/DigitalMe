---
description: "Правила форматирования и синтаксиса для C# кода. Ключевые слова: 'C# стиль', 'форматирование C#', 'csharp style', 'синтаксис C#', 'скобки', 'именование', 'отступы'."
globs: *.cs, *.csproj, *.sln
alwaysApply: false
---
# Правила форматирования для C# файлов

## Примечание
Принципы разработки (SOLID, fail-fast, async/await паттерны) вынесены в `csharp-principles.mdc`

## Наименование

### Классы, методы, структуры, записи, перечисления, события
- Начинаются с заглавной буквы: `SomeMethodName`

### Публичные и internal переменные, свойства
- Начинаются с заглавной буквы: `public int SomeVariable;`

### Приватные переменные (поля)
- Начинаются со строчной буквы: `private string otherProperty;`

### Константы
- Прописные буквы, слова разделены подчеркиванием: `public const string MY_STRING = "My string text";`

### Аббревиатуры
- Заглавная первая буква, остальные строчные: `SqlCommand`, `StartTimeUtc`

## Форматирование кода

### Блоки кода
- Предпочитаем блоки кода inline-формату
- Каждая блочная конструкция должна быть обрамлена в фигурные скобки даже если она состоит из одной строки
- Каждая фигурная скобка должна бать на отдельной строке
- Между закрытым блоком кода (его последней фигурной скобкой) и следующей значащей строкой должен быть перенос строки (целая пустая строка), за исключением конструкций вроде try-catch-finally, где эти блоки кода связаны между собой и по сути являются чуть ли не единым оператором

### Условные операторы
- Если внутри условия есть логические операторы, которые перестали вмещаться в строку, то каждый следующий оператор должен переноситься на новую строку
- Вложение тернарных операторов друг в друга запрещено как нечитаемое
- **ОБЯЗАТЕЛЬНЫЕ СКОБКИ**: Все блочные операторы (if, else, for, while, foreach, using) ДОЛЖНЫ содержать фигурные скобки, даже если внутри одна строка

### Обязательные скобки - примеры:
```csharp
// ❌ ЗАПРЕЩЕНО - inline инструкции без скобок
if (condition) return;
if (condition) DoSomething();
for (int i = 0; i < 10; i++) Process(i);

// ✅ ОБЯЗАТЕЛЬНО - всегда используй скобки
if (condition) 
{
    return;
}

if (condition) 
{
    DoSomething();
}

for (int i = 0; i < 10; i++) 
{
    Process(i);
}
```


## Значимые имена
- Все имена должны быть понятными и грамотными
- ✅ `private bool possibleToSave = false;`
- ❌ `private bool p = false;`
- ❌ `private bool pts = false;`
- ❌ `private bool uzheMoznaZapesat = false;`

## Документирование
- Все публичные методы, классы и объекты должны иметь XML-комментарии
- Комментарии на русском языке, значимые и понятные
- Желательно документировать и приватные объекты

```csharp
/// <summary>Возвращает первый элемент последовательности, удовлетворяющий условию, или значение по умолчанию</summary>
/// <typeparam name="TSource">Тип элементов источника</typeparam>
/// <param name="source">Последовательность для поиска элемента</param>
/// <param name="predicate">Функция для проверки условия</param>
/// <returns>Первый найденный элемент или значение по умолчанию</returns>
public static TSource FirstOrDefault<TSource>(this IEnumerable<TSource> source, Func<TSource, bool> predicate)
```

## Обязательные требования
- Для IDisposable типов всегда использовать `using` или вызывать `.Dispose()` в `finally`
- Все даты переводить в UTC и хранить только в этом часовом поясе
- Не должно быть ошибок и варнингов (фиксим или супрессим с пояснением)
- Не должно быть TODO в сданных задачах
- Использовать `System.Text.Json`, а не `Newtonsoft.Json`
- Использовать `Microsoft.Data.SqlClient`, а не `System.Data.SqlClient`
- Отступы - пробелы, не табуляция
- Принципы SOLID, DRY, KISS и YAGNI одновременно

## Модульное тестирование
- Каркас: xUnit
- Максимальное покрытие тестами
- Тесты должны работать на любом компьютере (без привязки к абсолютным путям)
- Класс тестера обрабатывает один тестируемый класс
- Имя метода: `тестируемыйМетод_объяснениеЛогикиТеста()`
- Принцип "черный ящик" - тестируй результат, а не внутреннее состояние
- Тестопригодность - каждый класс должен получать зависимости извне

