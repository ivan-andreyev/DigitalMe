---
description: Применять при создании плана создания нового проекта или нового функционала
alwaysApply: false
---
# TDD Plan Generator

## Структура плана

Всегда создавай план в следующей последовательности секций:
1. Общая информация
2. Модели данных (входящие и исходящие)
3. Абстракции/интерфейсы
4. Архитектурное проектирование (применить правила `@architecture-documenter.mdc`)
5. Тесты
6. Реализация
7. Порядок разработки

## Отслеживание прогресса

Всегда добавляй чекбоксы к задачам для отслеживания прогресса:
```
- [ ] Задача
```

## Определение моделей

Всегда начинай с определения моделей данных в следующем порядке:
- Модели API/входящие данные
- Модели БД/исходящие данные
- Вспомогательные модели

## Определение абстракций

После моделей определи все необходимые интерфейсы:
- Разделяй интерфейсы по ответственности
- Включай только необходимые методы
- Комментируй назначение методов

## Тесты до имплементации

Тесты должны быть написаны до реализации:
- Модульные тесты для трансформаций данных
- Тесты для основных классов с моками
- Тесты для внешних взаимодействий (API, БД)
- Тесты пограничных случаев

## Порядок реализации

Соблюдай определенный порядок реализации:
1. Утилитарные классы и трансформации данных
2. Базовые абстрактные классы
3. Конкретные сервисы
4. Главный класс, объединяющий компоненты

## Примеры кода

Для каждой секции предоставляй примеры кода в правильных блоках:
```csharp
// Код на C#
```

## Учет особых случаев

Явно отмечай особые случаи и потенциальные проблемы:
- Обработка нестандартных форматов данных
- Обработка ошибок от внешних систем
- Пагинация и обработка больших объемов данных
- Обработка разных часовых поясов

## Пример структуры TDD-плана

```markdown
# План разработки [Компонент] в TDD стиле

## Общая информация
- **Название компонента**: ComponentName
- **Источник данных**: API Source
- **Таблица назначения**: Target Table
- **Особенность данных**: Special Data Format
- **Дополнительные требования**: Additional Requirements

## 1. Модели данных

### 1.1 Модели API
- [ ] Модель для API-запроса:
```csharp
public class ApiRequest { }
```
- [ ] Модель для API-ответа
- [ ] Вспомогательные модели

### 1.2 Модели данных (сущности БД)
- [ ] Основная сущность:
```csharp
public class Entity { }
```

### 1.3 Вспомогательные модели
- [ ] Параметры компонента

## 2. Абстракции (интерфейсы)
- [ ] Основной интерфейс компонента
- [ ] Интерфейсы для сервисов
- [ ] Интерфейсы для трансформации данных

## 3. Тесты
- [ ] Тесты трансформации данных
- [ ] Тесты основного компонента
- [ ] Тесты внешних взаимодействий
- [ ] Тесты пограничных случаев

## 4. Реализация
- [ ] Утилитарные классы
- [ ] Базовые классы
- [ ] Конкретные сервисы
- [ ] Основной компонент

## 5. Порядок разработки
- [ ] Написать модели данных
- [ ] Определить интерфейсы
- [ ] Написать тесты
- [ ] Реализовать компоненты в порядке:
  - [ ] Утилиты и трансформации
  - [ ] Базовые классы
  - [ ] Конкретные сервисы
  - [ ] Основной компонент
- [ ] Провести тестирование
```

При следовании этим принципам ты получишь структурированный план разработки, который позволит последовательно реализовать задачу с минимальным количеством ошибок и возврата к предыдущим этапам.


