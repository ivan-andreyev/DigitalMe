using System.ComponentModel.DataAnnotations;
using System.ComponentModel.DataAnnotations.Schema;

namespace DigitalMe.Data.Entities;

/// <summary>
/// Represents a single message within a conversation.
/// Can be either user input or AI response.
/// </summary>
[Table("Messages")]
public class Message : BaseEntity
{
    /// <summary>
    /// ID of the conversation this message belongs to.
    /// </summary>
    [Required]
    public Guid ConversationId { get; set; }

    /// <summary>
    /// Navigation property to the conversation.
    /// </summary>
    public virtual Conversation Conversation { get; set; } = null!;

    /// <summary>
    /// The actual message content/text.
    /// </summary>
    [Required]
    [MaxLength(10000)]
    public string Content { get; set; } = string.Empty;

    /// <summary>
    /// Type of message: "user" or "assistant".
    /// </summary>
    [Required]
    [MaxLength(20)]
    public string Role { get; set; } = string.Empty;

    /// <summary>
    /// Timestamp when the message was sent/received.
    /// </summary>
    public DateTime Timestamp { get; set; } = DateTime.UtcNow;

    /// <summary>
    /// Optional metadata about the message (JSON).
    /// Can contain processing time, model used, etc.
    /// </summary>
    [Column(TypeName = "jsonb")]
    public string? Metadata { get; set; }

    /// <summary>
    /// Indicates if this message was generated by AI.
    /// </summary>
    public bool IsAiGenerated { get; set; } = false;

    /// <summary>
    /// Optional token count for AI-generated messages.
    /// </summary>
    public int? TokenCount { get; set; }

    /// <summary>
    /// Default constructor for Entity Framework.
    /// </summary>
    public Message() : base() { }

    /// <summary>
    /// Constructor for creating a new message.
    /// </summary>
    /// <param name="conversationId">ID of the conversation</param>
    /// <param name="content">Message content</param>
    /// <param name="role">Message role (user/assistant)</param>
    public Message(Guid conversationId, string content, string role) : base()
    {
        ConversationId = conversationId;
        Content = content;
        Role = role;
        Timestamp = DateTime.UtcNow;
        IsAiGenerated = role == "assistant";
    }
}