@using DigitalMe.Web.Components.Shared
@inject HttpClient Http
@inject ILogger<PersonalityDashboard> Logger

<div class="personality-dashboard">
    <div class="dashboard-header">
        <h2>üß† Ivan's Digital Personality</h2>
        <div class="last-updated">
            @if (lastUpdated.HasValue)
            {
                <span>–û–±–Ω–æ–≤–ª–µ–Ω–æ: @lastUpdated.Value.ToString("HH:mm:ss")</span>
            }
            <button @onclick="RefreshData" class="refresh-button" disabled="@isLoading">
                <svg class="@(isLoading ? "spinning" : "")" width="16" height="16" viewBox="0 0 24 24" fill="currentColor">
                    <path d="M17.65,6.35C16.2,4.9 14.21,4 12,4A8,8 0 0,0 4,12A8,8 0 0,0 12,20C15.73,20 18.84,17.45 19.73,14H17.65C16.83,16.33 14.61,18 12,18A6,6 0 0,1 6,12A6,6 0 0,1 12,6C13.66,6 15.14,6.69 16.22,7.78L13,11H20V4L17.65,6.35Z" />
                </svg>
            </button>
        </div>
    </div>

    @if (isLoading && personalityData == null)
    {
        <div class="loading-state">
            <div class="loading-spinner large"></div>
            <p>–ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ –ª–∏—á–Ω–æ—Å—Ç–∏ –ò–≤–∞–Ω–∞...</p>
        </div>
    }
    else if (personalityData == null)
    {
        <div class="error-state">
            <p>‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –æ –ª–∏—á–Ω–æ—Å—Ç–∏</p>
            <button @onclick="RefreshData" class="retry-button">–ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å —Å–Ω–æ–≤–∞</button>
        </div>
    }
    else
    {
        <div class="dashboard-content">
            <!-- Current Status Section -->
            <div class="status-section">
                <h3>üìä –¢–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ</h3>
                <div class="status-cards">
                    <div class="status-card primary">
                        <div class="card-icon">@GetMoodEmoji()</div>
                        <div class="card-content">
                            <div class="card-title">@GetCurrentMood()</div>
                            <div class="card-subtitle">–û—Å–Ω–æ–≤–Ω–æ–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ</div>
                        </div>
                    </div>
                    
                    <div class="status-card secondary">
                        <div class="card-icon">‚ö°</div>
                        <div class="card-content">
                            <div class="card-title">@GetEnergyLevel()%</div>
                            <div class="card-subtitle">–≠–Ω–µ—Ä–≥–∏—è</div>
                        </div>
                    </div>
                    
                    <div class="status-card accent">
                        <div class="card-icon">üß†</div>
                        <div class="card-content">
                            <div class="card-title">@GetCognitiveLoad()%</div>
                            <div class="card-subtitle">–ö–æ–≥–Ω–∏—Ç–∏–≤–Ω–∞—è –Ω–∞–≥—Ä—É–∑–∫–∞</div>
                        </div>
                    </div>
                </div>
            </div>

            <!-- Personality Traits Section -->
            <div class="traits-section">
                <h3>üéØ –õ–∏—á–Ω–æ—Å—Ç–Ω—ã–µ —á–µ—Ä—Ç—ã</h3>
                <div class="traits-grid">
                    @foreach (var trait in GetTopTraits())
                    {
                        <TraitVisualization 
                            TraitName="@trait.Name"
                            TraitValue="@trait.Value"
                            Description="@trait.Description"
                            Icon="@trait.Icon" />
                    }
                </div>
            </div>

            <!-- Current Context Section -->
            <div class="context-section">
                <h3>üîÑ –¢–µ–∫—É—â–∏–π –∫–æ–Ω—Ç–µ–∫—Å—Ç</h3>
                <div class="context-cards">
                    <div class="context-card">
                        <h4>üíº –†–∞–±–æ—Ç–∞</h4>
                        <div class="context-item">
                            <span class="label">–¢–µ–∫—É—â–∞—è –∑–∞–¥–∞—á–∞:</span>
                            <span class="value">@(personalityData.CurrentActivity ?? "–î–æ—Å—Ç—É–ø–µ–Ω –¥–ª—è –æ–±—â–µ–Ω–∏—è")</span>
                        </div>
                        <div class="context-item">
                            <span class="label">–°—Ç–∞—Ç—É—Å:</span>
                            <span class="value">@(personalityData.IsOnline ? "üü¢ Online" : "üî¥ Offline")</span>
                        </div>
                    </div>
                    
                    <div class="context-card">
                        <h4>üè† –õ–∏—á–Ω–æ–µ</h4>
                        <div class="context-item">
                            <span class="label">–ú–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ:</span>
                            <span class="value">üá¨üá™ Batumi, Georgia</span>
                        </div>
                        <div class="context-item">
                            <span class="label">–í—Ä–µ–º—è:</span>
                            <span class="value">@DateTime.Now.ToString("HH:mm")</span>
                        </div>
                    </div>
                </div>
            </div>

            <!-- Recent Activity Section -->
            <div class="activity-section">
                <h3>üìà –ù–µ–¥–∞–≤–Ω—è—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å</h3>
                <div class="activity-timeline">
                    @foreach (var activity in GetRecentActivities())
                    {
                        <div class="activity-item">
                            <div class="activity-time">@activity.Time</div>
                            <div class="activity-icon">@activity.Icon</div>
                            <div class="activity-description">@activity.Description</div>
                        </div>
                    }
                </div>
            </div>
        </div>
    }
</div>

<style>
.personality-dashboard {
    max-width: 1200px;
    margin: 0 auto;
    padding: 24px;
    background: #fafafa;
    min-height: 100vh;
}

.dashboard-header {
    display: flex;
    justify-content: space-between;
    align-items: center;
    margin-bottom: 32px;
    padding-bottom: 16px;
    border-bottom: 2px solid #e0e0e0;
}

.dashboard-header h2 {
    color: #1a237e;
    font-size: 28px;
    font-weight: 700;
    margin: 0;
    font-family: 'Inter', sans-serif;
}

.last-updated {
    display: flex;
    align-items: center;
    gap: 12px;
    color: #757575;
    font-size: 14px;
    font-family: 'Roboto Mono', monospace;
}

.refresh-button {
    background: none;
    border: 1px solid #e0e0e0;
    border-radius: 8px;
    padding: 8px;
    cursor: pointer;
    color: #757575;
    transition: all 0.2s ease;
}

.refresh-button:hover:not(:disabled) {
    background: #f5f5f5;
    border-color: #1a237e;
    color: #1a237e;
}

.spinning {
    animation: spin 1s linear infinite;
}

/* spin animation moved to components.css */

.loading-state, .error-state {
    text-align: center;
    padding: 80px 20px;
    color: #757575;
}

.loading-spinner.large {
    width: 48px;
    height: 48px;
    border: 4px solid #e0e0e0;
    border-top: 4px solid #1a237e;
    border-radius: 50%;
    animation: spin 1s linear infinite;
    margin: 0 auto 24px;
}

.retry-button {
    background: #1a237e;
    color: white;
    border: none;
    padding: 12px 24px;
    border-radius: 8px;
    cursor: pointer;
    font-size: 14px;
    margin-top: 16px;
}

.dashboard-content {
    display: grid;
    gap: 32px;
}

.status-section, .traits-section, .context-section, .activity-section {
    background: white;
    border-radius: 16px;
    padding: 24px;
    box-shadow: 0 2px 12px rgba(0, 0, 0, 0.08);
}

.status-section h3, .traits-section h3, .context-section h3, .activity-section h3 {
    color: #1a237e;
    font-size: 20px;
    font-weight: 600;
    margin: 0 0 20px 0;
    font-family: 'Inter', sans-serif;
}

.status-cards {
    display: grid;
    grid-template-columns: repeat(auto-fit, minmax(200px, 1fr));
    gap: 16px;
}

.status-card {
    background: linear-gradient(135deg, var(--card-color-1), var(--card-color-2));
    color: white;
    padding: 20px;
    border-radius: 12px;
    display: flex;
    align-items: center;
    gap: 16px;
}

.status-card.primary {
    --card-color-1: #1a237e;
    --card-color-2: #3f51b5;
}

.status-card.secondary {
    --card-color-1: #ff6f00;
    --card-color-2: #ff9800;
}

.status-card.accent {
    --card-color-1: #4caf50;
    --card-color-2: #66bb6a;
}

.card-icon {
    font-size: 32px;
    flex-shrink: 0;
}

.card-title {
    font-size: 24px;
    font-weight: 700;
    line-height: 1.2;
}

.card-subtitle {
    font-size: 14px;
    opacity: 0.9;
    line-height: 1.2;
}

.traits-grid {
    display: grid;
    grid-template-columns: repeat(auto-fit, minmax(300px, 1fr));
    gap: 20px;
}

.context-cards {
    display: grid;
    grid-template-columns: repeat(auto-fit, minmax(300px, 1fr));
    gap: 20px;
}

.context-card {
    border: 1px solid #e0e0e0;
    border-radius: 12px;
    padding: 20px;
    background: #fafafa;
}

.context-card h4 {
    color: #1a237e;
    font-size: 16px;
    font-weight: 600;
    margin: 0 0 16px 0;
}

.context-item {
    display: flex;
    justify-content: space-between;
    align-items: center;
    margin-bottom: 8px;
    font-size: 14px;
}

.context-item .label {
    color: #757575;
}

.context-item .value {
    color: #212121;
    font-weight: 500;
}

.activity-timeline {
    display: flex;
    flex-direction: column;
    gap: 16px;
}

.activity-item {
    display: flex;
    align-items: center;
    gap: 16px;
    padding: 12px;
    border-radius: 8px;
    background: #f5f5f5;
}

.activity-time {
    font-family: 'Roboto Mono', monospace;
    font-size: 12px;
    color: #757575;
    min-width: 60px;
}

.activity-icon {
    font-size: 20px;
    flex-shrink: 0;
}

.activity-description {
    color: #212121;
    font-size: 14px;
}
</style>

@code {
    private PersonalityStateDto? personalityData;
    private bool isLoading = false;
    private DateTime? lastUpdated;

    protected override async Task OnInitializedAsync()
    {
        await RefreshData();
    }

    private async Task RefreshData()
    {
        isLoading = true;
        StateHasChanged();

        try
        {
            // Try to get personality data from API
            personalityData = await Http.GetFromJsonAsync<PersonalityStateDto>("http://localhost:5000/api/personality/Ivan");
            lastUpdated = DateTime.Now;
            
            Logger.LogInformation("Personality data loaded successfully");
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "Failed to load personality data");
            
            // Use mock data as fallback
            personalityData = GetMockPersonalityData();
            lastUpdated = DateTime.Now;
        }
        finally
        {
            isLoading = false;
            StateHasChanged();
        }
    }

    private PersonalityStateDto GetMockPersonalityData()
    {
        return new PersonalityStateDto
        {
            IsOnline = true,
            CurrentMood = "Focused",
            CurrentActivity = "Code Review",
            EnergyLevel = 87,
            CognitiveLoad = 64,
            MoodEmoji = "üéØ",
            Traits = new Dictionary<string, int>
            {
                ["Analytical"] = 95,
                ["Problem-Solving"] = 93,
                ["Direct Communication"] = 87,
                ["Learning"] = 82,
                ["Pragmatic"] = 78
            },
            LastUpdated = DateTime.Now
        };
    }

    private string GetMoodEmoji()
    {
        return personalityData?.MoodEmoji ?? "ü§î";
    }

    private string GetCurrentMood()
    {
        return personalityData?.CurrentMood ?? "–î—É–º–∞–µ—Ç";
    }

    private int GetEnergyLevel()
    {
        return personalityData?.EnergyLevel ?? 75;
    }

    private int GetCognitiveLoad()
    {
        return personalityData?.CognitiveLoad ?? 50;
    }

    private List<TraitInfo> GetTopTraits()
    {
        var traits = personalityData?.Traits ?? new Dictionary<string, int>();
        
        return traits.OrderByDescending(t => t.Value)
                    .Take(6)
                    .Select(t => new TraitInfo
                    {
                        Name = GetTraitDisplayName(t.Key),
                        Value = t.Value,
                        Description = GetTraitDescription(t.Key),
                        Icon = GetTraitIcon(t.Key)
                    })
                    .ToList();
    }

    private string GetTraitDisplayName(string key)
    {
        return key switch
        {
            "Analytical" => "–ê–Ω–∞–ª–∏—Ç–∏—á–µ—Å–∫–æ–µ –º—ã—à–ª–µ–Ω–∏–µ",
            "Problem-Solving" => "–†–µ—à–µ–Ω–∏–µ –ø—Ä–æ–±–ª–µ–º", 
            "Direct Communication" => "–ü—Ä—è–º–æ–µ –æ–±—â–µ–Ω–∏–µ",
            "Learning" => "–û–±—É—á–∞–µ–º–æ—Å—Ç—å",
            "Pragmatic" => "–ü—Ä–∞–≥–º–∞—Ç–∏–∑–º",
            _ => key
        };
    }

    private string GetTraitDescription(string key)
    {
        return key switch
        {
            "Analytical" => "–°–∏—Å—Ç–µ–º–Ω—ã–π –ø–æ–¥—Ö–æ–¥ –∫ —Ä–∞–∑–±–æ—Ä—É —Å–ª–æ–∂–Ω—ã—Ö –∑–∞–¥–∞—á",
            "Problem-Solving" => "–ü–æ–∏—Å–∫ —Ä–µ—à–µ–Ω–∏–π –∏ –ø—Ä–µ–æ–¥–æ–ª–µ–Ω–∏–µ –ø—Ä–µ–ø—è—Ç—Å—Ç–≤–∏–π",
            "Direct Communication" => "–û—Ç–∫—Ä—ã—Ç–æ–µ –∏ —á–µ—Å—Ç–Ω–æ–µ –æ–±—â–µ–Ω–∏–µ",
            "Learning" => "–ü–æ—Å—Ç–æ—è–Ω–Ω–æ–µ –∏–∑—É—á–µ–Ω–∏–µ –Ω–æ–≤—ã—Ö —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–π",
            "Pragmatic" => "–ü—Ä–∞–∫—Ç–∏—á–µ—Å–∫–∏–π –ø–æ–¥—Ö–æ–¥ –∫ —Ä–µ—à–µ–Ω–∏—è–º",
            _ => "–õ–∏—á–Ω–æ—Å—Ç–Ω–∞—è —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∞"
        };
    }

    private string GetTraitIcon(string key)
    {
        return key switch
        {
            "Analytical" => "üîç",
            "Problem-Solving" => "üéØ",
            "Direct Communication" => "üí¨",
            "Learning" => "üìö",
            "Pragmatic" => "ü§ù",
            _ => "‚≠ê"
        };
    }

    private List<ActivityInfo> GetRecentActivities()
    {
        return new List<ActivityInfo>
        {
            new() { Time = "14:15", Icon = "‚úÖ", Description = "–ó–∞–≤–µ—Ä—à–∏–ª code review –¥–ª—è API –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏" },
            new() { Time = "14:02", Icon = "üí¨", Description = "–û–±—Å—É–¥–∏–ª –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä—É —Å —Ç–∏–º–ª–∏–¥–æ–º" },
            new() { Time = "13:45", Icon = "üë®‚Äçüè´", Description = "–ü—Ä–æ–≤–µ–ª –º–µ–Ω—Ç–æ—Ä–∏–Ω–≥ –¥–∂—É–Ω–∏–æ—Ä–∞ –ø–æ DI patterns" },
            new() { Time = "13:20", Icon = "üìû", Description = "–£—á–∞—Å—Ç–≤–æ–≤–∞–ª –≤ team standup" },
            new() { Time = "12:50", Icon = "üîß", Description = "–ò—Å–ø—Ä–∞–≤–∏–ª –±–∞–≥–∏ –≤ PersonalityService" }
        };
    }

    private class TraitInfo
    {
        public string Name { get; set; } = "";
        public int Value { get; set; }
        public string Description { get; set; } = "";
        public string Icon { get; set; } = "";
    }

    private class ActivityInfo
    {
        public string Time { get; set; } = "";
        public string Icon { get; set; } = "";
        public string Description { get; set; } = "";
    }

    private class PersonalityStateDto
    {
        public bool IsOnline { get; set; }
        public string? CurrentMood { get; set; }
        public string? CurrentActivity { get; set; }
        public int EnergyLevel { get; set; }
        public int CognitiveLoad { get; set; }
        public string? MoodEmoji { get; set; }
        public Dictionary<string, int> Traits { get; set; } = new();
        public DateTime LastUpdated { get; set; }
    }
}