@using DigitalMe.Web.Services
@inject IAuthService AuthService
@inject ILogger<UserMenu> Logger

<div class="user-menu">
    <div class="user-info" @onclick="ToggleDropdown">
        <div class="user-avatar">
            @if (!string.IsNullOrEmpty(userName))
            {
                <span>@GetUserInitials(userName)</span>
            }
            else
            {
                <span>üë§</span>
            }
        </div>
        <div class="user-details">
            <div class="user-name">@(userName ?? "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å")</div>
            <div class="user-status">@GetUserStatus()</div>
        </div>
        <div class="dropdown-arrow @(isDropdownOpen ? "open" : "")">
            <svg width="16" height="16" viewBox="0 0 24 24" fill="currentColor">
                <path d="M7,10L12,15L17,10H7Z" />
            </svg>
        </div>
    </div>

    @if (isDropdownOpen)
    {
        <div class="dropdown-menu">
            <div class="menu-header">
                <div class="menu-title">–ê–∫–∫–∞—É–Ω—Ç</div>
                <div class="menu-subtitle">@(userName ?? "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å")</div>
            </div>
            
            <div class="menu-items">
                <button class="menu-item" @onclick="ViewProfile">
                    <div class="menu-icon">üë§</div>
                    <span>–ü—Ä–æ—Ñ–∏–ª—å</span>
                </button>
                
                <button class="menu-item" @onclick="ViewSettings">
                    <div class="menu-icon">‚öôÔ∏è</div>
                    <span>–ù–∞—Å—Ç—Ä–æ–π–∫–∏</span>
                </button>
                
                <button class="menu-item" @onclick="ViewHistory">
                    <div class="menu-icon">üìö</div>
                    <span>–ò—Å—Ç–æ—Ä–∏—è —á–∞—Ç–æ–≤</span>
                </button>
                
                <div class="menu-divider"></div>
                
                <button class="menu-item" @onclick="ViewHelp">
                    <div class="menu-icon">‚ùì</div>
                    <span>–ü–æ–º–æ—â—å</span>
                </button>
                
                <button class="menu-item" @onclick="ViewAbout">
                    <div class="menu-icon">‚ÑπÔ∏è</div>
                    <span>–û DigitalMe</span>
                </button>
                
                <div class="menu-divider"></div>
                
                <button class="menu-item logout" @onclick="HandleLogout">
                    <div class="menu-icon">üö™</div>
                    <span>–í—ã–π—Ç–∏</span>
                </button>
            </div>
        </div>
    }
</div>

<!-- Click outside to close dropdown -->
@if (isDropdownOpen)
{
    <div class="dropdown-overlay" @onclick="CloseDropdown"></div>
}

<style>
.user-menu {
    position: relative;
    z-index: 1000;
}

.user-info {
    display: flex;
    align-items: center;
    gap: 12px;
    padding: 8px 12px;
    border-radius: 12px;
    cursor: pointer;
    transition: background-color 0.2s ease;
    min-width: 180px;
}

.user-info:hover {
    background: rgba(255, 255, 255, 0.1);
}

.user-avatar {
    width: 40px;
    height: 40px;
    border-radius: 50%;
    background: linear-gradient(135deg, #ff6f00 0%, #ff9800 100%);
    display: flex;
    align-items: center;
    justify-content: center;
    color: white;
    font-weight: 600;
    font-size: 14px;
    flex-shrink: 0;
}

.user-details {
    flex: 1;
    min-width: 0;
}

.user-name {
    font-size: 14px;
    font-weight: 600;
    color: white;
    white-space: nowrap;
    overflow: hidden;
    text-overflow: ellipsis;
}

.user-status {
    font-size: 12px;
    color: rgba(255, 255, 255, 0.8);
    white-space: nowrap;
    overflow: hidden;
    text-overflow: ellipsis;
}

.dropdown-arrow {
    color: rgba(255, 255, 255, 0.7);
    transition: transform 0.2s ease;
    flex-shrink: 0;
}

.dropdown-arrow.open {
    transform: rotate(180deg);
}

.dropdown-menu {
    position: absolute;
    top: 100%;
    right: 0;
    margin-top: 8px;
    background: white;
    border-radius: 12px;
    box-shadow: 0 4px 24px rgba(0, 0, 0, 0.15);
    min-width: 220px;
    overflow: hidden;
    animation: dropdownAppear 0.2s ease;
}

/* dropdownAppear animation moved to components.css */

.menu-header {
    padding: 16px 16px 12px;
    border-bottom: 1px solid #f0f0f0;
}

.menu-title {
    font-size: 16px;
    font-weight: 600;
    color: #1a237e;
    margin-bottom: 2px;
}

.menu-subtitle {
    font-size: 12px;
    color: #757575;
}

.menu-items {
    padding: 8px 0;
}

.menu-item {
    display: flex;
    align-items: center;
    gap: 12px;
    padding: 10px 16px;
    width: 100%;
    background: none;
    border: none;
    text-align: left;
    cursor: pointer;
    font-size: 14px;
    color: #212121;
    transition: background-color 0.2s ease;
}

.menu-item:hover {
    background: #f5f5f5;
}

.menu-item.logout {
    color: #d32f2f;
}

.menu-item.logout:hover {
    background: #ffebee;
}

.menu-icon {
    font-size: 16px;
    flex-shrink: 0;
}

.menu-divider {
    height: 1px;
    background: #f0f0f0;
    margin: 8px 0;
}

.dropdown-overlay {
    position: fixed;
    top: 0;
    left: 0;
    right: 0;
    bottom: 0;
    z-index: 999;
    cursor: default;
}
</style>

@code {
    private bool isDropdownOpen = false;
    private string? userName;

    protected override async Task OnInitializedAsync()
    {
        try
        {
            userName = await AuthService.GetUserNameAsync();
            AuthService.AuthStateChanged += OnAuthStateChanged;
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "Error initializing user menu");
        }
    }

    private void ToggleDropdown()
    {
        isDropdownOpen = !isDropdownOpen;
    }

    private void CloseDropdown()
    {
        isDropdownOpen = false;
    }

    private string GetUserInitials(string name)
    {
        if (string.IsNullOrEmpty(name))
            return "U";

        var parts = name.Split(' ', StringSplitOptions.RemoveEmptyEntries);
        if (parts.Length >= 2)
            return $"{parts[0][0]}{parts[1][0]}".ToUpper();
        
        return name[0].ToString().ToUpper();
    }

    private string GetUserStatus()
    {
        return DateTime.Now.Hour switch
        {
            >= 6 and < 12 => "‚òÄÔ∏è –î–æ–±—Ä–æ–µ —É—Ç—Ä–æ",
            >= 12 and < 18 => "üå§Ô∏è –î–æ–±—Ä—ã–π –¥–µ–Ω—å", 
            >= 18 and < 22 => "üåÖ –î–æ–±—Ä—ã–π –≤–µ—á–µ—Ä",
            _ => "üåô –î–æ–±—Ä–æ–π –Ω–æ—á–∏"
        };
    }

    private async Task HandleLogout()
    {
        try
        {
            CloseDropdown();
            await AuthService.LogoutAsync();
            Logger.LogInformation("User logged out");
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "Error during logout");
        }
    }

    private void ViewProfile()
    {
        CloseDropdown();
        // TODO: Navigate to profile page
        Logger.LogInformation("Profile view requested");
    }

    private void ViewSettings()
    {
        CloseDropdown();
        // TODO: Navigate to settings page
        Logger.LogInformation("Settings view requested");
    }

    private void ViewHistory()
    {
        CloseDropdown();
        // TODO: Navigate to chat history page
        Logger.LogInformation("Chat history view requested");
    }

    private void ViewHelp()
    {
        CloseDropdown();
        // TODO: Navigate to help page
        Logger.LogInformation("Help view requested");
    }

    private void ViewAbout()
    {
        CloseDropdown();
        // TODO: Navigate to about page
        Logger.LogInformation("About view requested");
    }

    private void OnAuthStateChanged(bool authenticated)
    {
        if (!authenticated)
        {
            userName = null;
            isDropdownOpen = false;
        }
        InvokeAsync(StateHasChanged);
    }

    public void Dispose()
    {
        if (AuthService != null)
        {
            AuthService.AuthStateChanged -= OnAuthStateChanged;
        }
    }
}