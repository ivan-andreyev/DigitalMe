@using DigitalMe.Web.Services
@implements IAsyncDisposable
@inject IJSRuntime JS
@inject ILogger<ChatContainer> Logger
@inject ISignalRChatService SignalRChatService

<div class="chat-container @CssClass">
    <div class="chat-header">
        <StatusWidget State="@PersonalityState" />
    </div>
    
    <div class="chat-messages" @ref="messagesContainer">
        @if (messages.Any())
        {
            @foreach (var message in messages)
            {
                <MessageBubble Message="@message" />
            }
        }
        else
        {
            <div class="welcome-message">
                <h3>üëã –ü—Ä–∏–≤–µ—Ç! –Ø - —Ü–∏—Ñ—Ä–æ–≤–∞—è –∫–æ–ø–∏—è –ò–≤–∞–Ω–∞</h3>
                <p>–ó–∞–¥–∞–≤–∞–π —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ –≤–æ–ø—Ä–æ—Å—ã, –æ–±—Å—É–∂–¥–∞–π –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä—É –∏–ª–∏ –ø—Ä–æ—Å—Ç–æ –ø–æ–æ–±—â–∞–π—Å—è!</p>
            </div>
        }
        
        @if (isIvanTyping)
        {
            <TypingIndicator />
        }
    </div>
    
    <div class="chat-input">
        <MessageInput OnMessageSent="@HandleMessageSent" 
                     IsLoading="@isLoading" 
                     Placeholder="–ù–∞–ø–∏—à–∏ –ò–≤–∞–Ω—É..." />
    </div>
</div>

<style>
.chat-container {
    display: flex;
    flex-direction: column;
    height: 100vh;
    max-width: 1200px;
    margin: 0 auto;
    background: #fafafa;
}

.chat-header {
    background: #1a237e;
    color: white;
    padding: 12px 20px;
    box-shadow: 0 2px 8px rgba(26, 35, 126, 0.2);
}

.chat-messages {
    flex: 1;
    overflow-y: auto;
    padding: 20px;
    display: flex;
    flex-direction: column;
    gap: 12px;
}

.welcome-message {
    text-align: center;
    padding: 40px 20px;
    color: #757575;
}

.welcome-message h3 {
    color: #1a237e;
    margin-bottom: 12px;
    font-family: 'Inter', sans-serif;
}

.chat-input {
    border-top: 1px solid #e0e0e0;
    padding: 16px 20px;
    background: white;
}
</style>

@code {
    [Parameter] public string CssClass { get; set; } = string.Empty;
    [Parameter] public PersonalityState PersonalityState { get; set; } = new();
    
    private ElementReference messagesContainer;
    private List<ChatMessage> messages = new();
    private bool isIvanTyping = false;
    private bool isLoading = false;
    private HubConnection? hubConnection;
    private string currentConversationId = Guid.NewGuid().ToString();

    protected override async Task OnInitializedAsync()
    {
        // Initialize SignalR connection
        await InitializeSignalRConnection();
        
        // Load conversation history if available
        await LoadConversationHistory();
    }

    private async Task InitializeSignalRConnection()
    {
        try
        {
            hubConnection = new HubConnectionBuilder()
                .WithUrl("http://localhost:5000/chathub") // Backend SignalR hub
                .Build();

            hubConnection.On<ChatMessageDto>("ReceiveMessage", HandleMessageReceived);
            hubConnection.On<bool>("TypingIndicator", HandleTypingIndicator);

            await hubConnection.StartAsync();
            Logger.LogInformation("SignalR connection started successfully");
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "Failed to initialize SignalR connection");
            // Continue without real-time features
        }
    }

    private async Task HandleMessageSent(string messageContent)
    {
        if (string.IsNullOrWhiteSpace(messageContent))
            return;

        isLoading = true;
        StateHasChanged();

        try
        {
            // Add user message immediately (optimistic UI)
            var userMessage = new ChatMessage
            {
                Id = Guid.NewGuid().ToString(),
                Content = messageContent,
                Role = MessageRole.User,
                Timestamp = DateTime.Now,
                ConversationId = currentConversationId
            };
            
            messages.Add(userMessage);
            StateHasChanged();
            
            await ScrollToBottom();

            // Send via SignalR if available, otherwise HTTP
            if (hubConnection?.State == HubConnectionState.Connected)
            {
                await hubConnection.InvokeAsync("SendMessage", messageContent, currentConversationId);
            }
            else
            {
                await SendMessageViaHttp(messageContent);
            }
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "Failed to send message");
            // TODO: Show error to user
        }
        finally
        {
            isLoading = false;
            StateHasChanged();
        }
    }

    private async Task SendMessageViaHttp(string messageContent)
    {
        using var httpClient = new HttpClient();
        
        var request = new
        {
            conversationId = currentConversationId,
            message = messageContent,
            platform = "Web",
            timestamp = DateTime.UtcNow
        };

        try
        {
            var response = await httpClient.PostAsJsonAsync("http://localhost:5000/api/chat/send", request);
            
            if (response.IsSuccessStatusCode)
            {
                var chatResponse = await response.Content.ReadFromJsonAsync<ChatResponseDto>();
                if (chatResponse != null)
                {
                    var ivanMessage = new ChatMessage
                    {
                        Id = chatResponse.MessageId ?? Guid.NewGuid().ToString(),
                        Content = chatResponse.Content,
                        Role = MessageRole.Assistant,
                        Timestamp = chatResponse.Timestamp,
                        ConversationId = currentConversationId
                    };
                    
                    messages.Add(ivanMessage);
                    StateHasChanged();
                    await ScrollToBottom();
                }
            }
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "HTTP message sending failed");
        }
    }

    private async Task HandleMessageReceived(ChatMessageDto messageDto)
    {
        var message = new ChatMessage
        {
            Id = messageDto.Id,
            Content = messageDto.Content,
            Role = MessageRole.Assistant,
            Timestamp = messageDto.Timestamp,
            ConversationId = messageDto.ConversationId
        };
        
        messages.Add(message);
        await InvokeAsync(StateHasChanged);
        await ScrollToBottom();
    }

    private async Task HandleTypingIndicator(bool typing)
    {
        isIvanTyping = typing;
        await InvokeAsync(StateHasChanged);
    }

    private Task LoadConversationHistory()
    {
        // TODO: Load from API if conversation exists
        // For now, start fresh
        return Task.CompletedTask;
    }

    private async Task ScrollToBottom()
    {
        try
        {
            await JS.InvokeVoidAsync("scrollToBottom", messagesContainer);
        }
        catch (Exception ex)
        {
            Logger.LogWarning(ex, "Failed to scroll to bottom");
        }
    }

    public async ValueTask DisposeAsync()
    {
        if (hubConnection is not null)
        {
            await hubConnection.DisposeAsync();
        }
    }
}