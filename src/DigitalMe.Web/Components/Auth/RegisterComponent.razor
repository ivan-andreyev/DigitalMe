@using System.ComponentModel.DataAnnotations
@inject IAuthService AuthService
@inject ILogger<RegisterComponent> Logger

<div class="login-container">
    <div class="login-form">
        <div class="login-header">
            <div class="logo">ü§ñ</div>
            <h2>–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –≤ DigitalMe</h2>
            <p>–°–æ–∑–¥–∞–π—Ç–µ –∞–∫–∫–∞—É–Ω—Ç –¥–ª—è –æ–±—â–µ–Ω–∏—è —Å —Ü–∏—Ñ—Ä–æ–≤–æ–π –∫–æ–ø–∏–µ–π –ò–≤–∞–Ω–∞</p>
        </div>

        <EditForm Model="@_registerRequest" OnValidSubmit="@HandleRegister" class="form">
            <DataAnnotationsValidator />
            
            <div class="form-group">
                <label for="email">Email</label>
                <InputText id="email" 
                          @bind-Value="_registerRequest.Email" 
                          class="form-input" 
                          placeholder="your-email@example.com"
                          disabled="@_isLoading" />
                <ValidationMessage For="@(() => _registerRequest.Email)" />
            </div>

            <div class="form-group">
                <label for="password">–ü–∞—Ä–æ–ª—å</label>
                <div class="password-input">
                    <InputText id="password" 
                              type="@(_showPassword ? "text" : "password")"
                              @bind-Value="_registerRequest.Password" 
                              class="form-input" 
                              placeholder="–í–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å"
                              disabled="@_isLoading" />
                    <button type="button" 
                            class="password-toggle"
                            @onclick="@(() => _showPassword = !_showPassword)">
                        @if (_showPassword)
                        {
                            <svg width="20" height="20" viewBox="0 0 24 24" fill="currentColor">
                                <path d="M12,9A3,3 0 0,1 15,12A3,3 0 0,1 12,15A3,3 0 0,1 9,12A3,3 0 0,1 12,9M12,4.5C17,4.5 21.27,7.61 23,12C21.27,16.39 17,19.5 12,19.5C7,19.5 2.73,16.39 1,12C2.73,7.61 7,4.5 12,4.5M12,7A5,5 0 0,0 7,12A5,5 0 0,0 12,17A5,5 0 0,0 17,12A5,5 0 0,0 12,7Z" />
                            </svg>
                        }
                        else
                        {
                            <svg width="20" height="20" viewBox="0 0 24 24" fill="currentColor">
                                <path d="M2,5.27L3.28,4L20,20.72L18.73,22L15.65,18.92C14.5,19.3 13.28,19.5 12,19.5C7,19.5 2.73,16.39 1,12C1.69,10.24 2.79,8.69 4.19,7.46L2,5.27M12,9A3,3 0 0,1 15,12C15,12.35 14.94,12.69 14.83,13L11,9.17C11.31,9.06 11.65,9 12,9M12,4.5C17,4.5 21.27,7.61 23,12C22.18,14.08 20.79,15.88 19,17.19L17.58,15.76C18.94,14.82 20.06,13.54 20.82,12C19.17,8.64 15.76,6.5 12,6.5C10.91,6.5 9.84,6.68 8.84,7L7.3,5.47C8.74,4.85 10.34,4.5 12,4.5M3.18,12C4.83,15.36 8.24,17.5 12,17.5C12.69,17.5 13.37,17.43 14,17.29L11.72,15C10.29,14.85 9.15,13.71 9,12.28L5.6,8.87C4.61,9.72 3.78,10.78 3.18,12Z" />
                            </svg>
                        }
                    </button>
                </div>
                <ValidationMessage For="@(() => _registerRequest.Password)" />
            </div>

            <div class="form-group">
                <label for="confirmPassword">–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å</label>
                <div class="password-input">
                    <InputText id="confirmPassword" 
                              type="@(_showConfirmPassword ? "text" : "password")"
                              @bind-Value="_registerRequest.ConfirmPassword" 
                              class="form-input" 
                              placeholder="–ü–æ–≤—Ç–æ—Ä–∏—Ç–µ –ø–∞—Ä–æ–ª—å"
                              disabled="@_isLoading" />
                    <button type="button" 
                            class="password-toggle"
                            @onclick="@(() => _showConfirmPassword = !_showConfirmPassword)">
                        @if (_showConfirmPassword)
                        {
                            <svg width="20" height="20" viewBox="0 0 24 24" fill="currentColor">
                                <path d="M12,9A3,3 0 0,1 15,12A3,3 0 0,1 12,15A3,3 0 0,1 9,12A3,3 0 0,1 12,9M12,4.5C17,4.5 21.27,7.61 23,12C21.27,16.39 17,19.5 12,19.5C7,19.5 2.73,16.39 1,12C2.73,7.61 7,4.5 12,4.5M12,7A5,5 0 0,0 7,12A5,5 0 0,0 12,17A5,5 0 0,0 17,12A5,5 0 0,0 12,7Z" />
                            </svg>
                        }
                        else
                        {
                            <svg width="20" height="20" viewBox="0 0 24 24" fill="currentColor">
                                <path d="M2,5.27L3.28,4L20,20.72L18.73,22L15.65,18.92C14.5,19.3 13.28,19.5 12,19.5C7,19.5 2.73,16.39 1,12C1.69,10.24 2.79,8.69 4.19,7.46L2,5.27M12,9A3,3 0 0,1 15,12C15,12.35 14.94,12.69 14.83,13L11,9.17C11.31,9.06 11.65,9 12,9M12,4.5C17,4.5 21.27,7.61 23,12C22.18,14.08 20.79,15.88 19,17.19L17.58,15.76C18.94,14.82 20.06,13.54 20.82,12C19.17,8.64 15.76,6.5 12,6.5C10.91,6.5 9.84,6.68 8.84,7L7.3,5.47C8.74,4.85 10.34,4.5 12,4.5M3.18,12C4.83,15.36 8.24,17.5 12,17.5C12.69,17.5 13.37,17.43 14,17.29L11.72,15C10.29,14.85 9.15,13.71 9,12.28L5.6,8.87C4.61,9.72 3.78,10.78 3.18,12Z" />
                            </svg>
                        }
                    </button>
                </div>
                <ValidationMessage For="@(() => _registerRequest.ConfirmPassword)" />
            </div>

            @if (!string.IsNullOrEmpty(_errorMessage))
            {
                <div class="error-message">
                    ‚ö†Ô∏è @_errorMessage
                </div>
            }

            @if (!string.IsNullOrEmpty(_successMessage))
            {
                <div class="success-message">
                    ‚úÖ @_successMessage
                </div>
            }

            <div class="form-actions">
                <button type="submit" 
                        class="login-button" 
                        disabled="@_isLoading">
                    @if (_isLoading)
                    {
                        <div class="loading-spinner"></div>
                        <span>–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è...</span>
                    }
                    else
                    {
                        <span>–°–æ–∑–¥–∞—Ç—å –∞–∫–∫–∞—É–Ω—Ç</span>
                    }
                </button>

                <div class="switch-form">
                    <span>–£–∂–µ –µ—Å—Ç—å –∞–∫–∫–∞—É–Ω—Ç? </span>
                    <button type="button" class="link-button" @onclick="@(() => OnSwitchToLogin.InvokeAsync())">
                        –í–æ–π—Ç–∏
                    </button>
                </div>
            </div>
        </EditForm>

        <div class="demo-credentials">
            <h4>üß™ Demo –¥–æ—Å—Ç—É–ø:</h4>
            <p>–ï—Å–ª–∏ –Ω–µ —Ö–æ—Ç–∏—Ç–µ —Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ demo –∞–∫–∫–∞—É–Ω—Ç</p>
            <button @onclick="@(() => OnSwitchToLogin.InvokeAsync())" class="demo-button">
                –ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å demo
            </button>
        </div>
    </div>
</div>

<style>
/* –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ç–µ –∂–µ —Å—Ç–∏–ª–∏ —á—Ç–æ –∏ –≤ LoginComponent */
.login-container {
    display: flex;
    align-items: center;
    justify-content: center;
    min-height: 100vh;
    background: linear-gradient(135deg, #1a237e 0%, #3f51b5 50%, #ff6f00 100%);
    padding: 20px;
}

.login-form {
    background: white;
    border-radius: 16px;
    padding: 32px;
    box-shadow: 0 8px 32px rgba(0, 0, 0, 0.12);
    width: 100%;
    max-width: 400px;
}

.login-header {
    text-align: center;
    margin-bottom: 32px;
}

.logo {
    font-size: 48px;
    margin-bottom: 16px;
}

.login-header h2 {
    color: #1a237e;
    font-size: 24px;
    font-weight: 700;
    margin: 0 0 8px 0;
    font-family: 'Inter', sans-serif;
}

.login-header p {
    color: #757575;
    font-size: 14px;
    margin: 0;
}

.form {
    display: flex;
    flex-direction: column;
    gap: 20px;
}

.form-group {
    display: flex;
    flex-direction: column;
    gap: 8px;
}

.form-group label {
    color: #212121;
    font-size: 14px;
    font-weight: 500;
}

.form-input {
    padding: 12px 16px;
    border: 2px solid #e0e0e0;
    border-radius: 8px;
    font-size: 16px;
    transition: border-color 0.2s ease;
    font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, sans-serif;
}

.form-input:focus {
    outline: none;
    border-color: #1a237e;
}

.form-input:disabled {
    opacity: 0.6;
    cursor: not-allowed;
    background: #f5f5f5;
}

.password-input {
    position: relative;
}

.password-toggle {
    position: absolute;
    right: 12px;
    top: 50%;
    transform: translateY(-50%);
    background: none;
    border: none;
    color: #757575;
    cursor: pointer;
    padding: 4px;
    border-radius: 4px;
    transition: color 0.2s ease;
}

.password-toggle:hover {
    color: #1a237e;
}

.error-message {
    background: #ffebee;
    color: #c62828;
    padding: 12px 16px;
    border-radius: 8px;
    font-size: 14px;
    border-left: 4px solid #c62828;
}

.success-message {
    background: #e8f5e8;
    color: #2e7d32;
    padding: 12px 16px;
    border-radius: 8px;
    font-size: 14px;
    border-left: 4px solid #2e7d32;
}

.form-actions {
    display: flex;
    flex-direction: column;
    gap: 16px;
    margin-top: 8px;
}

.login-button {
    background: linear-gradient(135deg, #1a237e 0%, #3f51b5 100%);
    color: white;
    border: none;
    padding: 14px 24px;
    border-radius: 8px;
    font-size: 16px;
    font-weight: 600;
    cursor: pointer;
    display: flex;
    align-items: center;
    justify-content: center;
    gap: 8px;
    transition: all 0.2s ease;
}

.login-button:hover:not(:disabled) {
    transform: translateY(-1px);
    box-shadow: 0 4px 12px rgba(26, 35, 126, 0.3);
}

.login-button:disabled {
    opacity: 0.7;
    cursor: not-allowed;
    transform: none;
}

.loading-spinner {
    width: 16px;
    height: 16px;
    border: 2px solid transparent;
    border-top: 2px solid white;
    border-radius: 50%;
    animation: spin 1s linear infinite;
}


.switch-form {
    text-align: center;
    font-size: 14px;
    color: #757575;
}

.link-button {
    background: none;
    border: none;
    color: #1a237e;
    text-decoration: underline;
    cursor: pointer;
    font-size: 14px;
    padding: 0;
    transition: color 0.2s ease;
}

.link-button:hover {
    color: #3f51b5;
}

.demo-credentials {
    margin-top: 24px;
    padding: 16px;
    background: #f5f5f5;
    border-radius: 8px;
    border: 1px dashed #bdbdbd;
}

.demo-credentials h4 {
    color: #1a237e;
    font-size: 14px;
    margin: 0 0 8px 0;
}

.demo-credentials p {
    font-size: 12px;
    margin: 4px 0;
    color: #424242;
}

.demo-button {
    background: #ff6f00;
    color: white;
    border: none;
    padding: 8px 16px;
    border-radius: 6px;
    font-size: 12px;
    cursor: pointer;
    margin-top: 8px;
    transition: background 0.2s ease;
}

.demo-button:hover {
    background: #ff8f00;
}

</style>

@code {
    [Parameter] public EventCallback<string> OnRegisterSuccess { get; set; }
    [Parameter] public EventCallback OnSwitchToLogin { get; set; }

    private RegisterRequest _registerRequest = new();
    private bool _isLoading;
    private bool _showPassword;
    private bool _showConfirmPassword;
    private string _errorMessage = string.Empty;
    private string _successMessage = string.Empty;

    private async Task HandleRegister()
    {
        if (_isLoading) 
        {
            return;
        }

        _isLoading = true;
        _errorMessage = string.Empty;
        _successMessage = string.Empty;
        StateHasChanged();

        try
        {
            // Clear any existing auth state before registration attempt
            await AuthService.LogoutAsync();

            var result = await AuthService.RegisterAsync(_registerRequest.Email, _registerRequest.Password, _registerRequest.ConfirmPassword);

            Logger.LogInformation("RegisterAsync returned: Success={Success}, ErrorMessage={ErrorMessage}, Token={Token}",
                result.Success, result.ErrorMessage, result.Token?.Substring(0, Math.Min(10, result.Token?.Length ?? 0)));

            if (result.Success)
            {
                Logger.LogInformation("Registration successful for user: {Email}", _registerRequest.Email);
                _successMessage = "–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –ø—Ä–æ—à–ª–∞ —É—Å–ø–µ—à–Ω–æ! –í—ã –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –≤–æ—à–ª–∏ –≤ —Å–∏—Å—Ç–µ–º—É.";
                
                // –ù–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ —á—Ç–æ–±—ã –ø–æ–∫–∞–∑–∞—Ç—å —É—Å–ø–µ—à–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
                await Task.Delay(1500);
                
                // Notify parent component
                await OnRegisterSuccess.InvokeAsync(result.Token ?? string.Empty);
            }
            else
            {
                _errorMessage = result.ErrorMessage ?? "–û—à–∏–±–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.";
                Logger.LogWarning("Registration failed for user {Email}: {Error}", _registerRequest.Email, result.ErrorMessage);
            }
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "Unexpected error during registration");
            _errorMessage = "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –Ω–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.";
        }
        finally
        {
            _isLoading = false;
            StateHasChanged();
        }
    }


    private class RegisterRequest
    {
        [Required(ErrorMessage = "Email –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω")]
        [EmailAddress(ErrorMessage = "–í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π email")]
        public string Email { get; set; } = string.Empty;

        [Required(ErrorMessage = "–ü–∞—Ä–æ–ª—å –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω")]
        [MinLength(8, ErrorMessage = "–ü–∞—Ä–æ–ª—å –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å –º–∏–Ω–∏–º—É–º 8 —Å–∏–º–≤–æ–ª–æ–≤")]
        [RegularExpression(@"^(?=.*[a-z])(?=.*[A-Z])(?=.*\d)(?=.*[@$!%*?&])[A-Za-z\d@$!%*?&]{8,}$", 
                          ErrorMessage = "–ü–∞—Ä–æ–ª—å –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å –∑–∞–≥–ª–∞–≤–Ω—ã–µ –∏ —Å—Ç—Ä–æ—á–Ω—ã–µ –±—É–∫–≤—ã, —Ü–∏—Ñ—Ä—ã –∏ —Å–ø–µ—Ü—Å–∏–º–≤–æ–ª—ã")]
        public string Password { get; set; } = string.Empty;

        [Required(ErrorMessage = "–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –ø–∞—Ä–æ–ª—è –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ")]
        [Compare(nameof(Password), ErrorMessage = "–ü–∞—Ä–æ–ª–∏ –Ω–µ —Å–æ–≤–ø–∞–¥–∞—é—Ç")]
        public string ConfirmPassword { get; set; } = string.Empty;
    }

}