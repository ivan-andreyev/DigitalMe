@using DigitalMe.Web.Services
@inject IAuthService AuthService
@inject ILogger<AuthWrapper> Logger
@implements IDisposable

@if (_isLoading)
{
    <div class="auth-loading">
        <div class="loading-container">
            <div class="loading-spinner large"></div>
            <p>Проверяем авторизацию...</p>
        </div>
    </div>
}
else if (_isAuthenticated)
{
    @ChildContent
}
else
{
    @if (_showRegister)
    {
        <RegisterComponent OnRegisterSuccess="@HandleRegisterSuccess" OnSwitchToLogin="@(() => _showRegister = false)" />
    }
    else
    {
        <LoginComponent OnLoginSuccess="@HandleLoginSuccess" OnSwitchToRegister="@(() => _showRegister = true)" />
    }
}

<style>
.auth-loading {
    display: flex;
    align-items: center;
    justify-content: center;
    min-height: 100vh;
    background: #fafafa;
}

.loading-container {
    text-align: center;
    padding: 40px;
}

.loading-spinner.large {
    width: 48px;
    height: 48px;
    border: 4px solid #e0e0e0;
    border-top: 4px solid #1a237e;
    border-radius: 50%;
    animation: spin 1s linear infinite;
    margin: 0 auto 24px;
}

.loading-container p {
    color: #757575;
    font-size: 16px;
    margin: 0;
}
</style>

@code {
    [Parameter] public RenderFragment? ChildContent { get; set; }

    private bool _isAuthenticated = false;
    private bool _isLoading = true;
    private bool _showRegister = false;

    protected override async Task OnInitializedAsync()
    {
        try
        {
            // Subscribe to auth state changes
            AuthService.AuthStateChanged += OnAuthStateChanged;

            // Check current authentication status
            _isAuthenticated = await AuthService.IsAuthenticatedAsync();
            
            Logger.LogInformation("Initial auth check completed. Authenticated: {IsAuthenticated}", _isAuthenticated);
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "Error during initial auth check");
            _isAuthenticated = false;
        }
        finally
        {
            _isLoading = false;
            StateHasChanged();
        }
    }

    private async Task HandleLoginSuccess(string token)
    {
        try
        {
            Logger.LogInformation("Login success received");
            
            // Auth state should be updated by the AuthService
            _isAuthenticated = await AuthService.IsAuthenticatedAsync();
            
            StateHasChanged();
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "Error handling login success");
        }
    }

    private async Task HandleRegisterSuccess(string token)
    {
        try
        {
            Logger.LogInformation("HandleRegisterSuccess called with token: {Token}", token?.Substring(0, Math.Min(10, token?.Length ?? 0)));

            var currentToken = await AuthService.GetTokenAsync();
            _isAuthenticated = await AuthService.IsAuthenticatedAsync();
            _showRegister = false;

            Logger.LogInformation("Auth state after registration: IsAuthenticated={IsAuthenticated}, CurrentToken={CurrentToken}",
                _isAuthenticated, currentToken?.Substring(0, Math.Min(10, currentToken?.Length ?? 0)));
            StateHasChanged();
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "Error handling registration success");
        }
    }

    private void OnAuthStateChanged(bool authenticated)
    {
        _isAuthenticated = authenticated;
        
        // Ensure UI update happens on correct thread
        InvokeAsync(() =>
        {
            StateHasChanged();
        });
        
        Logger.LogInformation("Auth state changed to: {IsAuthenticated}", authenticated);
    }

    public void Dispose()
    {
        if (AuthService != null)
        {
            AuthService.AuthStateChanged -= OnAuthStateChanged;
        }
    }
}