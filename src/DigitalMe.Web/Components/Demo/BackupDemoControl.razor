@inject IBackupDemoScenariosService BackupScenariosService
@inject ILogger<BackupDemoControl> Logger
@inject IJSRuntime JSRuntime

<div class="backup-demo-control">
    @if (showBackupOptions)
    {
        <div class="backup-panel">
            <div class="backup-header">
                <h4>üîÑ Demo Backup Mode</h4>
                <p>Ensure reliable demo execution with backup scenarios</p>
                <button class="close-btn" @onclick="HideBackupOptions">√ó</button>
            </div>

            <div class="backup-content">
                @if (currentMode == BackupMode.None)
                {
                    <div class="backup-modes">
                        <h5>Select Backup Mode:</h5>
                        
                        <div class="mode-options">
                            <button class="mode-btn offline" @onclick="() => ActivateBackupMode(BackupMode.OfflineComplete)">
                                <div class="mode-icon">üåê</div>
                                <div class="mode-info">
                                    <div class="mode-title">Complete Offline</div>
                                    <div class="mode-desc">Full offline demo capability</div>
                                </div>
                            </button>

                            <button class="mode-btn api" @onclick="() => ActivateBackupMode(BackupMode.ApiFailure)">
                                <div class="mode-icon">ü§ñ</div>
                                <div class="mode-info">
                                    <div class="mode-title">AI API Backup</div>
                                    <div class="mode-desc">Prerecorded AI responses</div>
                                </div>
                            </button>

                            <button class="mode-btn integration" @onclick="() => ActivateBackupMode(BackupMode.IntegrationFailure)">
                                <div class="mode-icon">üîó</div>
                                <div class="mode-info">
                                    <div class="mode-title">Integration Backup</div>
                                    <div class="mode-desc">Mock integration responses</div>
                                </div>
                            </button>

                            <button class="mode-btn network" @onclick="() => ActivateBackupMode(BackupMode.NetworkIssues)">
                                <div class="mode-icon">üì∂</div>
                                <div class="mode-info">
                                    <div class="mode-title">Network Backup</div>
                                    <div class="mode-desc">Cached responses mode</div>
                                </div>
                            </button>
                        </div>
                    </div>
                }
                else
                {
                    <div class="backup-active">
                        <div class="active-mode">
                            <div class="status-indicator">‚úÖ</div>
                            <div class="status-text">
                                <h5>Backup Mode Active: @GetModeDisplayName(currentMode)</h5>
                                <p>Demo environment is configured for reliable execution</p>
                            </div>
                        </div>

                        <div class="backup-features">
                            <div class="feature-list">
                                @foreach (var feature in GetActiveFeatures())
                                {
                                    <div class="feature-item">
                                        <span class="feature-icon">‚úì</span>
                                        <span class="feature-text">@feature</span>
                                    </div>
                                }
                            </div>
                        </div>

                        <div class="backup-actions">
                            <button class="action-btn secondary" @onclick="DeactivateBackupMode">
                                Deactivate Backup
                            </button>
                            <button class="action-btn primary" @onclick="TestBackupScenarios">
                                Test Scenarios
                            </button>
                        </div>
                    </div>
                }
            </div>

            @if (availableScenarios.Any())
            {
                <div class="available-scenarios">
                    <h5>üìã Available Backup Scenarios:</h5>
                    <div class="scenario-grid">
                        @foreach (var scenario in availableScenarios)
                        {
                            <div class="scenario-card @(scenario.Audience.ToString().ToLower())">
                                <div class="scenario-header">
                                    <div class="scenario-title">@scenario.Title</div>
                                    <div class="scenario-audience">@scenario.Audience</div>
                                </div>
                                <div class="scenario-description">@scenario.Description</div>
                                <div class="scenario-footer">
                                    <span class="duration">‚è±Ô∏è @scenario.EstimatedDuration.TotalMinutes min</span>
                                    <span class="backup-support">
                                        @if (scenario.BackupModeSupported)
                                        {
                                            <span class="supported">üõ°Ô∏è Backup Ready</span>
                                        }
                                        else
                                        {
                                            <span class="not-supported">‚ö†Ô∏è Limited Backup</span>
                                        }
                                    </span>
                                </div>
                            </div>
                        }
                    </div>
                </div>
            }
        </div>

        <div class="backup-overlay" @onclick="HideBackupOptions"></div>
    }

    <div class="backup-trigger">
        <button class="backup-toggle @(isBackupActive ? "active" : "")" @onclick="ShowBackupOptions" title="Demo Backup Options">
            @if (isBackupActive)
            {
                <span class="indicator active">üõ°Ô∏è</span>
            }
            else
            {
                <span class="indicator">üîÑ</span>
            }
            <span class="label">Backup</span>
        </button>

        @if (isBackupActive)
        {
            <div class="backup-status-mini">
                <span class="status-text">@GetModeDisplayName(currentMode)</span>
            </div>
        }
    </div>
</div>

<style>
.backup-demo-control {
    position: fixed;
    top: 20px;
    right: 20px;
    z-index: 1000;
}

.backup-trigger {
    display: flex;
    flex-direction: column;
    align-items: flex-end;
    gap: 8px;
}

.backup-toggle {
    display: flex;
    align-items: center;
    gap: 8px;
    padding: 12px 16px;
    background: #f8f9fa;
    border: 2px solid #e0e0e0;
    border-radius: 25px;
    cursor: pointer;
    transition: all 0.3s ease;
    box-shadow: 0 2px 8px rgba(0, 0, 0, 0.1);
}

.backup-toggle:hover {
    background: #e3f2fd;
    border-color: #2196f3;
    transform: translateY(-2px);
}

.backup-toggle.active {
    background: #e8f5e8;
    border-color: #4caf50;
}

.backup-toggle .indicator {
    font-size: 18px;
}

.backup-toggle .label {
    font-size: 14px;
    font-weight: 500;
    color: #424242;
}

.backup-status-mini {
    background: #4caf50;
    color: white;
    padding: 4px 12px;
    border-radius: 12px;
    font-size: 12px;
    font-weight: 500;
}

.backup-panel {
    position: fixed;
    top: 50%;
    left: 50%;
    transform: translate(-50%, -50%);
    width: 90vw;
    max-width: 800px;
    max-height: 90vh;
    overflow-y: auto;
    background: white;
    border-radius: 20px;
    box-shadow: 0 20px 60px rgba(0, 0, 0, 0.3);
    z-index: 1002;
}

.backup-overlay {
    position: fixed;
    top: 0;
    left: 0;
    width: 100vw;
    height: 100vh;
    background: rgba(0, 0, 0, 0.5);
    z-index: 1001;
}

.backup-header {
    position: relative;
    padding: 24px;
    background: linear-gradient(135deg, #1a237e, #3f51b5);
    color: white;
    border-radius: 20px 20px 0 0;
}

.backup-header h4 {
    margin: 0 0 8px 0;
    font-size: 24px;
    font-weight: 600;
}

.backup-header p {
    margin: 0;
    opacity: 0.9;
}

.close-btn {
    position: absolute;
    top: 20px;
    right: 24px;
    background: none;
    border: none;
    color: white;
    font-size: 24px;
    cursor: pointer;
    padding: 4px;
    border-radius: 4px;
}

.close-btn:hover {
    background: rgba(255, 255, 255, 0.1);
}

.backup-content {
    padding: 24px;
}

.backup-modes h5 {
    color: #1a237e;
    margin-bottom: 16px;
    font-size: 18px;
    font-weight: 600;
}

.mode-options {
    display: grid;
    grid-template-columns: repeat(auto-fit, minmax(180px, 1fr));
    gap: 16px;
    margin-bottom: 24px;
}

.mode-btn {
    display: flex;
    align-items: center;
    gap: 12px;
    padding: 16px;
    border: 2px solid #e0e0e0;
    background: #f8f9fa;
    border-radius: 12px;
    cursor: pointer;
    transition: all 0.3s ease;
    text-align: left;
}

.mode-btn:hover {
    transform: translateY(-2px);
    box-shadow: 0 8px 20px rgba(0, 0, 0, 0.1);
}

.mode-btn.offline:hover {
    border-color: #9c27b0;
    background: #f3e5f5;
}

.mode-btn.api:hover {
    border-color: #ff9800;
    background: #fff3e0;
}

.mode-btn.integration:hover {
    border-color: #00bcd4;
    background: #e0f2f1;
}

.mode-btn.network:hover {
    border-color: #607d8b;
    background: #eceff1;
}

.mode-icon {
    font-size: 24px;
    flex-shrink: 0;
}

.mode-info {
    flex: 1;
}

.mode-title {
    font-weight: 600;
    color: #424242;
    margin-bottom: 4px;
}

.mode-desc {
    font-size: 13px;
    color: #757575;
}

.backup-active {
    text-align: center;
}

.active-mode {
    display: flex;
    align-items: center;
    gap: 16px;
    padding: 20px;
    background: #e8f5e8;
    border-radius: 12px;
    margin-bottom: 20px;
}

.status-indicator {
    font-size: 32px;
}

.status-text h5 {
    margin: 0 0 4px 0;
    color: #2e7d32;
    font-size: 18px;
}

.status-text p {
    margin: 0;
    color: #4caf50;
    font-size: 14px;
}

.backup-features {
    margin-bottom: 24px;
}

.feature-list {
    display: grid;
    grid-template-columns: repeat(auto-fit, minmax(200px, 1fr));
    gap: 12px;
}

.feature-item {
    display: flex;
    align-items: center;
    gap: 8px;
    padding: 8px 12px;
    background: #f8f9fa;
    border-radius: 8px;
}

.feature-icon {
    color: #4caf50;
    font-weight: 600;
}

.feature-text {
    font-size: 14px;
    color: #424242;
}

.backup-actions {
    display: flex;
    gap: 12px;
    justify-content: center;
}

.action-btn {
    padding: 12px 24px;
    border-radius: 8px;
    border: none;
    font-weight: 500;
    cursor: pointer;
    transition: all 0.2s ease;
}

.action-btn.primary {
    background: #1a237e;
    color: white;
}

.action-btn.secondary {
    background: #e0e0e0;
    color: #424242;
}

.action-btn:hover {
    transform: translateY(-2px);
    box-shadow: 0 4px 12px rgba(0, 0, 0, 0.2);
}

.available-scenarios {
    margin-top: 24px;
    padding-top: 24px;
    border-top: 2px solid #f0f0f0;
}

.available-scenarios h5 {
    color: #1a237e;
    margin-bottom: 16px;
    font-size: 16px;
    font-weight: 600;
}

.scenario-grid {
    display: grid;
    grid-template-columns: repeat(auto-fit, minmax(250px, 1fr));
    gap: 16px;
}

.scenario-card {
    border: 2px solid #e0e0e0;
    border-radius: 12px;
    padding: 16px;
    background: #f8f9fa;
    transition: all 0.2s ease;
}

.scenario-card:hover {
    transform: translateY(-2px);
    box-shadow: 0 4px 12px rgba(0, 0, 0, 0.1);
}

.scenario-card.executive {
    border-left: 4px solid #1a237e;
}

.scenario-card.technical {
    border-left: 4px solid #00796b;
}

.scenario-card.mixed {
    border-left: 4px solid #f57c00;
}

.scenario-header {
    display: flex;
    justify-content: space-between;
    align-items: flex-start;
    margin-bottom: 8px;
}

.scenario-title {
    font-weight: 600;
    color: #424242;
    font-size: 14px;
    flex: 1;
}

.scenario-audience {
    font-size: 12px;
    color: #757575;
    background: #e0e0e0;
    padding: 2px 8px;
    border-radius: 4px;
}

.scenario-description {
    font-size: 13px;
    color: #757575;
    line-height: 1.4;
    margin-bottom: 12px;
}

.scenario-footer {
    display: flex;
    justify-content: space-between;
    align-items: center;
    font-size: 12px;
}

.duration {
    color: #757575;
}

.supported {
    color: #4caf50;
    font-weight: 500;
}

.not-supported {
    color: #f57c00;
    font-weight: 500;
}

@media (max-width: 768px) {
    .backup-demo-control {
        top: 10px;
        right: 10px;
    }

    .backup-panel {
        width: 95vw;
        max-height: 95vh;
    }

    .mode-options {
        grid-template-columns: 1fr;
    }

    .scenario-grid {
        grid-template-columns: 1fr;
    }
    
    .backup-actions {
        flex-direction: column;
    }
}
</style>

@code {
    private bool showBackupOptions = false;
    private bool isBackupActive = false;
    private BackupMode currentMode = BackupMode.None;
    private List<DemoScenario> availableScenarios = new();

    protected override async Task OnInitializedAsync()
    {
        try
        {
            isBackupActive = await BackupScenariosService.IsBackupModeActiveAsync();
            availableScenarios = await BackupScenariosService.GetAvailableScenariosAsync();
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "Failed to initialize backup demo control");
        }
    }

    private void ShowBackupOptions()
    {
        showBackupOptions = true;
        StateHasChanged();
    }

    private void HideBackupOptions()
    {
        showBackupOptions = false;
        StateHasChanged();
    }

    private async Task ActivateBackupMode(BackupMode mode)
    {
        try
        {
            await BackupScenariosService.ActivateBackupModeAsync(mode);
            currentMode = mode;
            isBackupActive = true;
            
            Logger.LogInformation($"Backup mode activated: {mode}");
            await JSRuntime.InvokeVoidAsync("alert", $"Backup mode '{GetModeDisplayName(mode)}' activated successfully!");
            
            StateHasChanged();
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, $"Failed to activate backup mode: {mode}");
            await JSRuntime.InvokeVoidAsync("alert", "Failed to activate backup mode. Please try again.");
        }
    }

    private async Task DeactivateBackupMode()
    {
        try
        {
            await BackupScenariosService.ActivateBackupModeAsync(BackupMode.None);
            currentMode = BackupMode.None;
            isBackupActive = false;
            
            Logger.LogInformation("Backup mode deactivated");
            await JSRuntime.InvokeVoidAsync("alert", "Backup mode deactivated successfully!");
            
            StateHasChanged();
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "Failed to deactivate backup mode");
            await JSRuntime.InvokeVoidAsync("alert", "Failed to deactivate backup mode. Please try again.");
        }
    }

    private async Task TestBackupScenarios()
    {
        try
        {
            var testResponse = await BackupScenariosService.GetBackupResponseAsync("technical_expertise", "demo_test");
            await JSRuntime.InvokeVoidAsync("alert", $"Backup test successful!\n\nResponse preview: {testResponse.Content[..Math.Min(100, testResponse.Content.Length)]}...");
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "Backup scenario test failed");
            await JSRuntime.InvokeVoidAsync("alert", "Backup scenario test failed. Please check the configuration.");
        }
    }

    private string GetModeDisplayName(BackupMode mode)
    {
        return mode switch
        {
            BackupMode.OfflineComplete => "Complete Offline",
            BackupMode.ApiFailure => "AI API Backup",
            BackupMode.IntegrationFailure => "Integration Backup",
            BackupMode.NetworkIssues => "Network Backup",
            BackupMode.None => "No Backup",
            _ => "Unknown"
        };
    }

    private List<string> GetActiveFeatures()
    {
        return currentMode switch
        {
            BackupMode.OfflineComplete => new List<string>
            {
                "Complete offline operation",
                "No external dependencies", 
                "Preloaded demo content",
                "Mock integration responses",
                "Cached AI responses"
            },
            BackupMode.ApiFailure => new List<string>
            {
                "Prerecorded AI responses",
                "Personality trait consistency",
                "Professional response quality",
                "Fast response times"
            },
            BackupMode.IntegrationFailure => new List<string>
            {
                "Mock Slack integration",
                "Mock ClickUp integration",
                "Mock GitHub integration",
                "Mock Telegram integration"
            },
            BackupMode.NetworkIssues => new List<string>
            {
                "Cached response fallbacks",
                "Reduced network dependency",
                "Local asset serving",
                "Optimized bandwidth usage"
            },
            _ => new List<string>()
        };
    }
}