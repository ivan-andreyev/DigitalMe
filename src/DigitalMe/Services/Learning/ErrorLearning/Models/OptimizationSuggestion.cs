using System;
using System.ComponentModel.DataAnnotations;
using System.ComponentModel.DataAnnotations.Schema;

namespace DigitalMe.Services.Learning.ErrorLearning.Models;

/// <summary>
/// Represents an optimization suggestion generated by the Error Learning System
/// Provides actionable recommendations based on learned error patterns
/// </summary>
public class OptimizationSuggestion
{
    /// <summary>
    /// Unique identifier for the optimization suggestion
    /// </summary>
    [Key]
    public int Id { get; set; }

    /// <summary>
    /// Foreign key to the error pattern that generated this suggestion
    /// </summary>
    public int ErrorPatternId { get; set; }

    /// <summary>
    /// Navigation property to the associated error pattern
    /// </summary>
    [ForeignKey(nameof(ErrorPatternId))]
    public virtual ErrorPattern ErrorPattern { get; set; } = null!;

    /// <summary>
    /// Type of optimization suggestion
    /// </summary>
    [Required]
    public OptimizationType Type { get; set; }

    /// <summary>
    /// Priority level of this suggestion (1-5, where 5 is highest priority)
    /// </summary>
    public int Priority { get; set; }

    /// <summary>
    /// Human-readable title of the suggestion
    /// </summary>
    [Required]
    [StringLength(200)]
    public string Title { get; set; } = string.Empty;

    /// <summary>
    /// Detailed description of the optimization suggestion
    /// </summary>
    [Required]
    [StringLength(1000)]
    public string Description { get; set; } = string.Empty;

    /// <summary>
    /// Specific component or area this suggestion applies to
    /// </summary>
    [StringLength(100)]
    public string? TargetComponent { get; set; }

    /// <summary>
    /// Expected impact of implementing this suggestion
    /// </summary>
    [StringLength(500)]
    public string? ExpectedImpact { get; set; }

    /// <summary>
    /// Estimated effort required to implement (hours)
    /// </summary>
    public double? EstimatedEffortHours { get; set; }

    /// <summary>
    /// Confidence score for this suggestion (0.0 - 1.0)
    /// </summary>
    public double ConfidenceScore { get; set; }

    /// <summary>
    /// Timestamp when this suggestion was generated
    /// </summary>
    public DateTime GeneratedAt { get; set; }

    /// <summary>
    /// Status of this suggestion
    /// </summary>
    public SuggestionStatus Status { get; set; }

    /// <summary>
    /// Implementation details or code snippets
    /// Stored as JSON for structured data
    /// </summary>
    public string? ImplementationDetails { get; set; }

    /// <summary>
    /// Tags for categorization and filtering
    /// Stored as comma-separated values
    /// </summary>
    [StringLength(200)]
    public string? Tags { get; set; }

    /// <summary>
    /// Whether this suggestion has been reviewed by a human
    /// </summary>
    public bool IsReviewed { get; set; }

    /// <summary>
    /// Human reviewer feedback or notes
    /// </summary>
    public string? ReviewerNotes { get; set; }

    /// <summary>
    /// Timestamp when this suggestion was reviewed
    /// </summary>
    public DateTime? ReviewedAt { get; set; }
}

/// <summary>
/// Types of optimization suggestions that can be generated
/// </summary>
public enum OptimizationType
{
    /// <summary>
    /// Suggestion to improve test case design
    /// </summary>
    TestCaseOptimization = 1,

    /// <summary>
    /// Suggestion to improve error handling
    /// </summary>
    ErrorHandlingImprovement = 2,

    /// <summary>
    /// Suggestion to improve timeout or retry logic
    /// </summary>
    TimeoutOptimization = 3,

    /// <summary>
    /// Suggestion to improve assertion logic
    /// </summary>
    AssertionImprovement = 4,

    /// <summary>
    /// Suggestion to improve API documentation parsing
    /// </summary>
    DocumentationParsingImprovement = 5,

    /// <summary>
    /// Suggestion to improve pattern recognition
    /// </summary>
    PatternRecognitionImprovement = 6,

    /// <summary>
    /// Suggestion for architectural improvements
    /// </summary>
    ArchitecturalImprovement = 7,

    /// <summary>
    /// Suggestion for performance optimization
    /// </summary>
    PerformanceOptimization = 8,

    /// <summary>
    /// General code quality improvement
    /// </summary>
    CodeQualityImprovement = 9
}

/// <summary>
/// Status of an optimization suggestion
/// </summary>
public enum SuggestionStatus
{
    /// <summary>
    /// Suggestion has been generated but not yet reviewed
    /// </summary>
    Generated = 1,

    /// <summary>
    /// Suggestion is under review
    /// </summary>
    UnderReview = 2,

    /// <summary>
    /// Suggestion has been approved for implementation
    /// </summary>
    Approved = 3,

    /// <summary>
    /// Suggestion has been rejected
    /// </summary>
    Rejected = 4,

    /// <summary>
    /// Suggestion is being implemented
    /// </summary>
    InProgress = 5,

    /// <summary>
    /// Suggestion has been successfully implemented
    /// </summary>
    Implemented = 6,

    /// <summary>
    /// Suggestion implementation was deferred
    /// </summary>
    Deferred = 7
}