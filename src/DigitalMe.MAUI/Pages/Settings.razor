@page "/settings"
@using DigitalMe.MAUI.Services
@inject IPlatformService PlatformService
@inject INotificationService NotificationService

<PageTitle>–ù–∞—Å—Ç—Ä–æ–π–∫–∏ - DigitalMe</PageTitle>

<div class="settings-page">
    <div class="settings-header">
        <h1>‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏</h1>
        <p>–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ–º –∏ —Å–∏—Å—Ç–µ–º–æ–π</p>
    </div>
    
    <div class="settings-sections">
        <!-- Device Information -->
        <div class="settings-section">
            <h2>üì± –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± —É—Å—Ç—Ä–æ–π—Å—Ç–≤–µ</h2>
            <div class="setting-items">
                <div class="setting-item">
                    <span class="setting-label">–ü–ª–∞—Ç—Ñ–æ—Ä–º–∞:</span>
                    <span class="setting-value">@_deviceInfo.Platform</span>
                </div>
                <div class="setting-item">
                    <span class="setting-label">–ú–æ–¥–µ–ª—å:</span>
                    <span class="setting-value">@_deviceInfo.Model</span>
                </div>
                <div class="setting-item">
                    <span class="setting-label">–û–°:</span>
                    <span class="setting-value">@_deviceInfo.Os</span>
                </div>
                <div class="setting-item">
                    <span class="setting-label">–í–µ—Ä—Å–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è:</span>
                    <span class="setting-value">@_deviceInfo.AppVersion</span>
                </div>
                <div class="setting-item">
                    <span class="setting-label">–ò–Ω—Ç–µ—Ä–Ω–µ—Ç:</span>
                    <span class="setting-value status @(_deviceInfo.HasInternet ? "online" : "offline")">
                        @(_deviceInfo.HasInternet ? "üü¢ –ü–æ–¥–∫–ª—é—á–µ–Ω" : "üî¥ –û—Ç–∫–ª—é—á–µ–Ω")
                    </span>
                </div>
            </div>
        </div>

        <!-- Notifications -->
        <div class="settings-section">
            <h2>üîî –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è</h2>
            <div class="setting-items">
                <div class="setting-item interactive" @onclick="TestNotification">
                    <span class="setting-label">–¢–µ—Å—Ç–æ–≤–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ</span>
                    <button class="action-btn">–û—Ç–ø—Ä–∞–≤–∏—Ç—å</button>
                </div>
                <div class="setting-item interactive" @onclick="ScheduleNotification">
                    <span class="setting-label">–û—Ç–ª–æ–∂–µ–Ω–Ω–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ</span>
                    <button class="action-btn">–ó–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞—Ç—å</button>
                </div>
                <div class="setting-item interactive" @onclick="ClearNotifications">
                    <span class="setting-label">–û—á–∏—Å—Ç–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è</span>
                    <button class="action-btn danger">–û—á–∏—Å—Ç–∏—Ç—å</button>
                </div>
            </div>
        </div>

        <!-- Native Features -->
        <div class="settings-section">
            <h2>üéØ –ù–∞—Ç–∏–≤–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏</h2>
            <div class="setting-items">
                <div class="setting-item interactive" @onclick="ShareApp">
                    <span class="setting-label">–ü–æ–¥–µ–ª–∏—Ç—å—Å—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ–º</span>
                    <button class="action-btn">–ü–æ–¥–µ–ª–∏—Ç—å—Å—è</button>
                </div>
                <div class="setting-item interactive" @onclick="OpenBrowser">
                    <span class="setting-label">–û—Ç–∫—Ä—ã—Ç—å –≤–µ–±-–≤–µ—Ä—Å–∏—é</span>
                    <button class="action-btn">–û—Ç–∫—Ä—ã—Ç—å</button>
                </div>
                <div class="setting-item interactive" @onclick="CheckPermissions">
                    <span class="setting-label">–ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è</span>
                    <button class="action-btn">–ü—Ä–æ–≤–µ—Ä–∏—Ç—å</button>
                </div>
            </div>
        </div>

        <!-- Debug Information -->
        <div class="settings-section">
            <h2>üîß –û—Ç–ª–∞–¥–æ—á–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è</h2>
            <div class="debug-info">
                <div class="debug-item">
                    <strong>Device ID:</strong> @_deviceInfo.DeviceId
                </div>
                <div class="debug-item">
                    <strong>Physical Device:</strong> @(_deviceInfo.IsPhysical ? "–î–∞" : "–ù–µ—Ç")
                </div>
                <div class="debug-item">
                    <strong>Last Updated:</strong> @DateTime.Now.ToString("HH:mm:ss")
                </div>
            </div>
        </div>
    </div>
</div>

<style>
.settings-page {
    padding: 20px;
    max-width: 600px;
    margin: 0 auto;
}

.settings-header {
    text-align: center;
    margin-bottom: 32px;
}

.settings-header h1 {
    color: #1a237e;
    font-size: 28px;
    margin-bottom: 8px;
    font-family: 'Inter', sans-serif;
}

.settings-header p {
    color: #757575;
    margin: 0;
}

.settings-sections {
    display: flex;
    flex-direction: column;
    gap: 24px;
}

.settings-section {
    background: white;
    border-radius: 12px;
    padding: 20px;
    box-shadow: 0 2px 8px rgba(0,0,0,0.1);
}

.settings-section h2 {
    color: #1a237e;
    font-size: 18px;
    margin: 0 0 16px 0;
    font-family: 'Inter', sans-serif;
}

.setting-items {
    display: flex;
    flex-direction: column;
    gap: 12px;
}

.setting-item {
    display: flex;
    justify-content: space-between;
    align-items: center;
    padding: 12px 0;
    border-bottom: 1px solid #f0f0f0;
}

.setting-item:last-child {
    border-bottom: none;
}

.setting-item.interactive {
    cursor: pointer;
    padding: 12px;
    border-radius: 8px;
    border: 1px solid #e0e0e0;
    transition: background 0.2s ease;
}

.setting-item.interactive:hover {
    background: #f5f5f5;
}

.setting-label {
    font-size: 14px;
    color: #212121;
    font-weight: 500;
}

.setting-value {
    font-size: 14px;
    color: #757575;
    font-family: 'RobotoMono', monospace;
}

.setting-value.status.online {
    color: #4caf50;
}

.setting-value.status.offline {
    color: #f44336;
}

.action-btn {
    background: #1a237e;
    color: white;
    border: none;
    padding: 6px 16px;
    border-radius: 6px;
    font-size: 12px;
    cursor: pointer;
    transition: background 0.2s ease;
}

.action-btn:hover {
    background: #3f51b5;
}

.action-btn.danger {
    background: #f44336;
}

.action-btn.danger:hover {
    background: #d32f2f;
}

.debug-info {
    background: #f5f5f5;
    padding: 16px;
    border-radius: 8px;
    border: 1px dashed #bdbdbd;
}

.debug-item {
    font-family: 'RobotoMono', monospace;
    font-size: 12px;
    color: #424242;
    margin-bottom: 8px;
}

.debug-item:last-child {
    margin-bottom: 0;
}

.debug-item strong {
    color: #1a237e;
}
</style>

@code {
    private DeviceInfo _deviceInfo = new();
    
    protected override async Task OnInitializedAsync()
    {
        await LoadDeviceInfo();
    }
    
    private async Task LoadDeviceInfo()
    {
        try
        {
            _deviceInfo.Platform = PlatformService.GetPlatformName();
            _deviceInfo.Model = PlatformService.GetDeviceModel();
            _deviceInfo.Os = PlatformService.GetOperatingSystem();
            _deviceInfo.AppVersion = await PlatformService.GetAppVersionAsync();
            _deviceInfo.DeviceId = await PlatformService.GetDeviceIdAsync();
            _deviceInfo.IsPhysical = PlatformService.IsPhysicalDevice();
            _deviceInfo.HasInternet = await PlatformService.HasInternetConnectionAsync();
            
            StateHasChanged();
        }
        catch (Exception ex)
        {
            System.Diagnostics.Debug.WriteLine($"Error loading device info: {ex.Message}");
        }
    }
    
    private async Task TestNotification()
    {
        await NotificationService.ShowNotificationAsync(
            "–¢–µ—Å—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π",
            "–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è —Ä–∞–±–æ—Ç–∞—é—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ! üéâ",
            "test_notification"
        );
    }
    
    private async Task ScheduleNotification()
    {
        var scheduledTime = DateTime.Now.AddSeconds(5);
        await NotificationService.ScheduleNotificationAsync(
            "–û—Ç–ª–æ–∂–µ–Ω–Ω–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ",
            "–≠—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –±—ã–ª–æ –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–æ –∑–∞—Ä–∞–Ω–µ–µ ‚è∞",
            scheduledTime,
            "scheduled_notification"
        );
    }
    
    private async Task ClearNotifications()
    {
        await NotificationService.CancelAllNotificationsAsync();
        await NotificationService.ShowNotificationAsync(
            "–ì–æ—Ç–æ–≤–æ",
            "–í—Å–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ—á–∏—â–µ–Ω—ã üóëÔ∏è"
        );
    }
    
    private async Task ShareApp()
    {
        await PlatformService.ShareTextAsync(
            "–ü–æ–ø—Ä–æ–±—É–π DigitalMe - —Ü–∏—Ñ—Ä–æ–≤–æ–π –∫–ª–æ–Ω –ò–≤–∞–Ω–∞! ü§ñ –ò–Ω—Ç–µ—Ä–µ—Å–Ω—ã–µ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ –æ–±—Å—É–∂–¥–µ–Ω–∏—è –∏ –ø–æ–º–æ—â—å –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ.",
            "DigitalMe App"
        );
    }
    
    private async Task OpenBrowser()
    {
        await PlatformService.OpenUrlAsync("https://localhost:7264");
    }
    
    private async Task CheckPermissions()
    {
        var permissions = new[] { "Camera", "Photos", "Location", "Microphone", "Storage" };
        var results = new List<string>();
        
        foreach (var permission in permissions)
        {
            var granted = await PlatformService.RequestPermissionAsync(permission);
            results.Add($"{permission}: {(granted ? "‚úÖ" : "‚ùå")}");
        }
        
        await NotificationService.ShowNotificationAsync(
            "–†–∞–∑—Ä–µ—à–µ–Ω–∏—è –ø—Ä–æ–≤–µ—Ä–µ–Ω—ã",
            string.Join(", ", results)
        );
    }
    
    private class DeviceInfo
    {
        public string Platform { get; set; } = "";
        public string Model { get; set; } = "";
        public string Os { get; set; } = "";
        public string AppVersion { get; set; } = "";
        public string DeviceId { get; set; } = "";
        public bool IsPhysical { get; set; }
        public bool HasInternet { get; set; }
    }
}