name: Release Pipeline

on:
  push:
    tags:
      - 'v*.*.*'  # Trigger on version tags like v1.0.0
  workflow_dispatch:
    inputs:
      version:
        description: 'Release version (e.g., 1.0.0)'
        required: true
        type: string
      pre_release:
        description: 'Pre-release?'
        required: false
        type: boolean
        default: false

env:
  DOTNET_VERSION: '8.0'
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}/digitalme

jobs:
  create-release:
    name: Create Release
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.version.outputs.version }}
      upload_url: ${{ steps.create_release.outputs.upload_url }}
      
    steps:
    - name: 🚀 Checkout Code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: 📝 Extract Version
      id: version
      run: |
        if [[ "${{ github.event_name }}" == "workflow_dispatch" ]]; then
          VERSION="${{ github.event.inputs.version }}"
        else
          VERSION=${GITHUB_REF#refs/tags/v}
        fi
        echo "version=${VERSION}" >> $GITHUB_OUTPUT
        echo "Version: ${VERSION}"

    - name: 📋 Generate Changelog
      id: changelog
      run: |
        # Generate changelog from git commits since last tag
        LAST_TAG=$(git describe --tags --abbrev=0 HEAD^ 2>/dev/null || echo "")
        if [[ -n "$LAST_TAG" ]]; then
          CHANGELOG=$(git log ${LAST_TAG}..HEAD --pretty=format:"- %s (%h)" --no-merges)
        else
          CHANGELOG="Initial release"
        fi
        echo "changelog<<EOF" >> $GITHUB_OUTPUT
        echo "$CHANGELOG" >> $GITHUB_OUTPUT
        echo "EOF" >> $GITHUB_OUTPUT

    - name: 🏷️ Create Release
      id: create_release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: v${{ steps.version.outputs.version }}
        release_name: DigitalMe v${{ steps.version.outputs.version }}
        body: |
          # DigitalMe Release v${{ steps.version.outputs.version }}
          
          ## 🚀 What's New
          
          ${{ steps.changelog.outputs.changelog }}
          
          ## 📦 Deployment
          
          ### Docker Images
          ```bash
          docker pull ghcr.io/${{ github.repository }}/digitalme:v${{ steps.version.outputs.version }}
          docker pull ghcr.io/${{ github.repository }}/digitalme:latest
          ```
          
          ### Manual Deployment
          Download the artifacts from this release and follow the deployment guide in the documentation.
          
          ## 🧪 Verification
          
          All tests passed and security scans completed successfully.
          
          ---
          **Full Changelog**: https://github.com/${{ github.repository }}/compare/${{ steps.last_tag.outputs.tag }}...v${{ steps.version.outputs.version }}
        draft: false
        prerelease: ${{ github.event.inputs.pre_release == 'true' }}

  build-and-test:
    name: Build & Test for Release
    runs-on: ubuntu-latest
    needs: [create-release]
    
    steps:
    - name: 🚀 Checkout Code
      uses: actions/checkout@v4

    - name: 🔧 Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: ${{ env.DOTNET_VERSION }}

    - name: 🔄 Restore Dependencies
      run: dotnet restore DigitalMe.CI.sln

    - name: 🔨 Build Release
      run: dotnet build DigitalMe.CI.sln --configuration Release --no-restore

    - name: 🧪 Run All Tests
      run: |
        dotnet test DigitalMe.CI.sln \
          --configuration Release \
          --no-build \
          --logger "trx;LogFileName=release-tests.trx" \
          --collect:"XPlat Code Coverage"

    - name: 📦 Create Release Artifacts
      run: |
        # Publish main application
        dotnet publish DigitalMe/DigitalMe.csproj \
          --configuration Release \
          --output ./publish/digitalme-api \
          --runtime linux-x64 \
          --self-contained false
          
        # Publish web application  
        dotnet publish src/DigitalMe.Web/DigitalMe.Web.csproj \
          --configuration Release \
          --output ./publish/digitalme-web \
          --runtime linux-x64 \
          --self-contained false
          
        # Create deployment package
        tar -czf digitalme-v${{ needs.create-release.outputs.version }}-linux-x64.tar.gz -C ./publish .

    - name: 📤 Upload Release Asset
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ needs.create-release.outputs.upload_url }}
        asset_path: ./digitalme-v${{ needs.create-release.outputs.version }}-linux-x64.tar.gz
        asset_name: digitalme-v${{ needs.create-release.outputs.version }}-linux-x64.tar.gz
        asset_content_type: application/gzip

  build-docker-release:
    name: Build Release Docker Images
    runs-on: ubuntu-latest
    needs: [create-release, build-and-test]
    permissions:
      contents: read
      packages: write
      
    steps:
    - name: 🚀 Checkout Code
      uses: actions/checkout@v4

    - name: 🐳 Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: 🔑 Login to Container Registry
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}

    - name: 📝 Extract Metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
        tags: |
          type=semver,pattern={{version}},value=v${{ needs.create-release.outputs.version }}
          type=semver,pattern={{major}}.{{minor}},value=v${{ needs.create-release.outputs.version }}
          type=semver,pattern={{major}},value=v${{ needs.create-release.outputs.version }}
          type=raw,value=latest,enable={{is_default_branch}}

    - name: 🔨 Build and Push Release Image
      uses: docker/build-push-action@v5
      with:
        context: .
        file: ./Dockerfile
        platforms: linux/amd64,linux/arm64
        push: true
        tags: ${{ steps.meta.outputs.tags }}
        labels: |
          ${{ steps.meta.outputs.labels }}
          org.opencontainers.image.title=DigitalMe
          org.opencontainers.image.description=Персонализированный цифровой клон с поддержкой ИИ
          org.opencontainers.image.version=${{ needs.create-release.outputs.version }}
        cache-from: type=gha
        cache-to: type=gha,mode=max

  deploy-production:
    name: Deploy Production Release
    runs-on: ubuntu-latest
    needs: [create-release, build-docker-release]
    environment:
      name: production
      url: https://digitalme.app
    if: github.event.inputs.pre_release != 'true'
    
    steps:
    - name: 🚀 Deploy to Production
      run: |
        echo "🎉 Deploying DigitalMe v${{ needs.create-release.outputs.version }} to Production"
        echo "Docker Image: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:v${{ needs.create-release.outputs.version }}"
        # Add your production deployment logic here

    - name: ✅ Verify Deployment
      run: |
        echo "🔍 Verifying production deployment..."
        # Add health checks and verification logic